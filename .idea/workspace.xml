<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="1e16ebec-3d43-461b-82ea-c86814688abb" name="Default Changelist" comment="" />
    <ignored path="$PROJECT_DIR$/out/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FUSProjectUsageTrigger">
    <session id="-606700601">
      <usages-collector id="statistics.lifecycle.project">
        <counts>
          <entry key="project.closed" value="12" />
          <entry key="project.open.time.0" value="2" />
          <entry key="project.open.time.4" value="1" />
          <entry key="project.open.time.5" value="6" />
          <entry key="project.open.time.6" value="2" />
          <entry key="project.open.time.8" value="1" />
          <entry key="project.opened" value="12" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.file.types.open">
        <counts>
          <entry key="Clojure" value="7" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.file.types.edit">
        <counts>
          <entry key="Clojure" value="8747" />
          <entry key="PLAIN_TEXT" value="256" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.vcs.git.usages">
        <counts>
          <entry key="git.branch.compare" value="2" />
        </counts>
      </usages-collector>
    </session>
    <session id="-1586816">
      <usages-collector id="statistics.lifecycle.project">
        <counts>
          <entry key="project.closed" value="1" />
          <entry key="project.open.time.0" value="1" />
          <entry key="project.opened" value="1" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.file.types.open">
        <counts>
          <entry key="Clojure" value="4" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.file.types.edit">
        <counts>
          <entry key="Clojure" value="2" />
        </counts>
      </usages-collector>
    </session>
  </component>
  <component name="FavoritesManager">
    <favorites_list name="ThermodynMetal" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300" />
  </component>
  <component name="Git.Settings">
    <option name="PREVIOUS_COMMIT_AUTHORS">
      <list>
        <option value="imwhl &lt;imrharry@gmail.com&gt;" />
        <option value="hlwang" />
      </list>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/miedema.clj" />
        <option value="D:/thermodynmetal/project.clj" />
        <option value="$PROJECT_DIR$/src/org/shender/clojure_gnuplot.clj" />
        <option value="$PROJECT_DIR$/src/thermodynmetal/miedema.clj" />
        <option value="$PROJECT_DIR$/src/thermodynmetal/core.clj" />
        <option value="$PROJECT_DIR$/project.clj" />
      </list>
    </option>
  </component>
  <component name="MavenProjectNavigator">
    <treeState>
      <expand />
      <select />
    </treeState>
  </component>
  <component name="ProjectFrameBounds">
    <option name="x" value="305" />
    <option name="y" value="268" />
    <option name="width" value="926" />
    <option name="height" value="770" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes />
  </component>
  <component name="PropertiesComponent">
    <property name="last_opened_file_path" value="$PROJECT_DIR$/../test/project.clj" />
    <property name="project.structure.last.edited" value="Problems" />
    <property name="project.structure.proportion" value="0.0" />
    <property name="project.structure.side.proportion" value="0.2" />
    <property name="settings.editor.selected.configurable" value="preferences.editor" />
  </component>
  <component name="ReplState" timestamp="1550228369735">{:repl-history {:ide [], :local [{:command &quot;(def pi Math/PI)&quot;, :offset 16, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(defrecord atomInfo [name, a, transition, bulkmodulus, shearmodulus, meltingpoint, surfaceenergy, phi, nws, vm, R, atomicradius])&quot;, :offset 129, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(def Ag (-&gt;atomInfo \&quot;Ag\&quot;, 0.07, true, 100.7e9, 28.65e9, 1234, 0.00125, 4.35, 2.52, 10.2, 0.15, 165e-12))&quot;, :offset 104, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(def Cu (-&gt;atomInfo \&quot;Cu\&quot;, 0.07, true, 131e9, 45.13e9, 1357.6, 0.001825, 4.45, 3.18, 7.092, 0.3, 145e-12))&quot;, :offset 105, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(def Zn (-&gt;atomInfo \&quot;Zn\&quot;, 0.1, false, 59.85e9, 37.18e9, 692.73, 0.00099, 4.1, 2.3, 9.157, 1.4, 142e-12))&quot;, :offset 104, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(def Fe (-&gt;atomInfo \&quot;Fe\&quot;, 0.04, true, 168.3e9, 81.52e9, 1809, 0.002475, 4.93, 5.55, 7.1, 1, 156e-12))\n (def C (-&gt;atomInfo \&quot;C\&quot;, 0.04, false, 545.4e9, 451.3e9, 4100, 0, 6.24, 5.55, 3.2, 2.1, 67e-12))\n (def Al (-&gt;atomInfo \&quot;Al\&quot;, 0.07, false, 72.18e9, 26.59e9, 933.25, 0.00116, 4.2, 2.7, 9.993, 1.9, 118e-12))\n (def Mg (-&gt;atomInfo \&quot;Mg\&quot;, 0.1, false, 35.4e9, 17.36e9, 922, 0.00076, 3.45, 1.6, 14, 0.4, 145e-12))\n (def Ni (-&gt;atomInfo \&quot;Ni\&quot;, 0.04, true, 186.4e9, 75.05e9, 1726, 0.0245, 5.20, 5.36, 6.6, 1, 149e-12))\n (def N (-&gt;atomInfo \&quot;N\&quot;, 0.04, false, 0, 0, 63.14, 0, 6.86, 4.49, 4.1, 2.3, 56e-12))\n (def H (-&gt;atomInfo \&quot;H\&quot;, 0.14, false, 0, 0, 14.025, 0, 5.2, 3.38, 1.7, 3.9, 53e-12))\n (def Y (-&gt;atomInfo \&quot;Y\&quot;, 0.07, true, 36.62e9, 25.8e9, 1799, 0.001125, 3.2, 1.77, 19.9, 0.7, 212e-12))\n (def Cr (-&gt;atomInfo \&quot;Cr\&quot;, 0.04, true, 190.3e9, 116.7e9, 2130, 0.0023, 4.65, 5.18, 7.2, 1.0, 166e-12))\n (def Sr (-&gt;atomInfo \&quot;Sr\&quot;, 0.1, true, 11.62e9, 5.229e9, 1041, 0.00041, 2.4, 0.59, 33.9, 0.4, 219e-12))\n (def Sc (-&gt;atomInfo \&quot;Sc\&quot;, 0.07, true, 57.9e9, 31.29e9, 1812, 0.001275, 3.25, 2.05, 15, 0.7, 184e-12))\n (def Ti (-&gt;atomInfo \&quot;Ti\&quot;, 0.04, true, 105.2e9, 39.34e9, 1943, 0.0021, 3.8, 3.51, 10.6, 1.0, 176e-12))\n (def V (-&gt;atomInfo \&quot;V\&quot;, 0.04, true, 162e9, 46.5e9, 2175, 0.00255, 4.25, 4.41, 8.4, 1.0, 171e-12))\n (def Mo (-&gt;atomInfo \&quot;Mo\&quot;, 0.04, true, 272.6e9, 115.8e9, 2890, 0.003, 4.65, 5.55, 9.4, 1.0, 190e-12))\n (def Co (-&gt;atomInfo \&quot;Co\&quot;, 0.04, true, 191.5e9, 76.42e9, 1768, 0.00255, 5.1, 5.36, 6.7, 1.0, 152e-12))\n (def Li (-&gt;atomInfo \&quot;Li\&quot;, 0.14, false, 11.58e9, 4.228e9, 453.7, 0.000525, 2.85, 0.94, 13.0, 0, 167e-12))\n (def Na (-&gt;atomInfo \&quot;Na\&quot;, 0.14, false, 6.817e9, 3.434e9, 371, 0.00026, 2.7, 0.55, 23.8, 0, 190e-12))\n (def Ga (-&gt;atomInfo \&quot;Ga\&quot;, 0.07, false, 56.9e9, 37.47e9, 302.9, 0.0011, 4.1, 2.25, 11.8, 1.9, 136e-12))\n (def In (-&gt;atomInfo \&quot;In\&quot;, 0.07, false, 41.09e9, 3.728e9, 429.7, 0.000675, 3.9, 1.6, 15.7, 1.9, 156e-12))\n (def Tl (-&gt;atomInfo \&quot;Tl\&quot;, 0.07, false, 35.93e9, 2.747e9, 577, 0.000575, 3.9, 1.4, 17.2, 1.9, 156e-12))\n (def Sn (-&gt;atomInfo \&quot;Sn\&quot;, 0.04, false, 110.9e9, 18.44e9, 505.06, 0.000675, 4.15, 1.9, 16.3, 2.1, 145e-12))\n (def Pb (-&gt;atomInfo \&quot;Pb\&quot;, 0.04, false, 42.99e9, 5.396e9, 600.6, 0.0006, 4.1, 1.52, 18.3, 2.1, 154e-12))\n (def Sb (-&gt;atomInfo \&quot;Sb\&quot;, 0.04, false, 38.29e9, 20.01e9, 904, 0.000535, 4.4, 2, 16.9, 2.3, 133e-12))\n (def Bi (-&gt;atomInfo \&quot;Bi\&quot;, 0.04, false, 31.48e9, 12.85e9, 544.52, 0.00049, 4.15, 1.56, 19.3, 2.3, 143e-12))\n (def Pd (-&gt;atomInfo \&quot;Pd\&quot;, 0.04, true, 180.9e9, 51.11e9, 1825, 0.00205, 5.45, 4.66, 8.9, 1.0, 169e-12))\n (def Au (-&gt;atomInfo \&quot;Au\&quot;, 0.07, true, 173.2e9, 27.57e9, 137.58, 0.0015, 5.15, 3.87, 10.2, 0.3, 174e-12))\n (def Mn (-&gt;atomInfo \&quot;Mn\&quot;, 0.04, true, 59.67e9, 76.52e9, 1517, 0.0016, 4.45, 4.17, 7.3, 1.0, 161e-12))\n (def Zr (-&gt;atomInfo \&quot;Zr\&quot;, 0.04, true, 83.335e9, 34.14e9, 2125, 0.002, 3.45, 2.8, 14.0, 1.0, 206e-12))\n (def Nb (-&gt;atomInfo \&quot;Nb\&quot;, 0.04, true, 170.3e9, 37.47e9, 2740, 0.0027, 4.05, 4.41, 10.8, 1.0, 198e-12))\n (def Tc (-&gt;atomInfo \&quot;Tc\&quot;, 0.04, true, 297.2e9, 142.2e9, 2473, 0.00315, 5.3, 5.93, 8.6, 1.0, 183e-12))\n (def Ta (-&gt;atomInfo \&quot;Ta\&quot;, 0.04, true, 200.1e9, 28.67e9, 3287, 0.003150, 4.05, 4.33, 10.8, 1.0, 200e-12))\n (def W (-&gt;atomInfo \&quot;W\&quot;, 0.04, true, 323.3e9, 153e9, 3680, 0.003675, 4.8, 5.93, 9.5, 1.0, 193e-12))\n (def Pt (-&gt;atomInfo \&quot;Pt\&quot;, 0.04, true, 278.4e9, 61.02e9, 2045, 0.002475, 5.65, 5.64, 9.1, 1.0, 177e-12))\n (def La (-&gt;atomInfo \&quot;La\&quot;, 0.07, true, 24.3e9, 14.91e9, 1193, 0.001020, 3.17, 1.64, 22.5, 0.7, 226e-12))\n (def Re (-&gt;atomInfo \&quot;Re\&quot;, 0.04, true, 371.8e9, 178.5e9, 3453, 0.0036, 5.2, 6.33, 8.8, 1.0, 188e-12))\n (def Rh (-&gt;atomInfo \&quot;Rh\&quot;, 0.04, true, 270.6e9, 147.2e9, 2236, 0.0027, 5.4, 5.45, 8.3, 1.0, 173e-12))\n (def Ru (-&gt;atomInfo \&quot;Ru\&quot;, 0.04, true, 320.9e9, 159.9e9, 2523, 0.00305, 5.4, 6.13, 8.2, 1.0, 178e-12))\n (def Gd (-&gt;atomInfo \&quot;Gd\&quot;, 0.07, true, 38.34e9, 22.27e9, 1585, 0.00111, 3.2, 1.77, 19.9, 0.7, 233e-12))\n (def Ca (-&gt;atomInfo \&quot;Ca\&quot;, 0.1, false, 15.21e9, 7.358e9, 1112, 0.00049, 2.55, 0.75, 26.2, 0.4, 194e-12))\n (def B (-&gt;atomInfo \&quot;B\&quot;, 0.07, false, 178.5e9, 203.1e9, 2300, 0.00305, 5.30, 5.36, 4.7, 1.9, 87e-12))\n (def Cd (-&gt;atomInfo \&quot;Cd\&quot;, 0.1, false, 46.75e9, 24.13e9, 594.18, 0.00074, 4.05, 1.91, 13.0, 1.4, 161e-12))&quot;, :offset 4202, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(defn PQR [atoma atomb] (cond\n                           (and (:transition atoma) (:transition atomb)) {:P 14.1, :Q 132.54, :R 0}\n                           (not (or (:transition atoma) (:transition atomb))) {:P 10.6, :Q 99.64, :R 0}\n                           (and (or (:transition atoma) (:transition atomb)) (not (and (:transition atoma) (:transition atomb)))) {:P 12.3, :Q 115.62, :R (* 12.3 (:R atoma) (:R atomb))}\n                           ))&quot;, :offset 449, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(defn heatOfSolution [solute solvent]\n   (* 2\n      (/ (Math/pow (:vm solute) (/ 2.0 3.0))\n         (+ (Math/pow (:nws solute) (/ -1.0 3.0))\n            (Math/pow (:nws solvent) (/ -1.0 3.0))))\n      (let [pqr (PQR solute solvent)]\n        (+ (* -1 (:P pqr) (Math/pow (- (:phi solute) (:phi solvent)) 2))\n           (* (:Q pqr) (Math/pow (- (Math/pow (:nws solute) (/ 1.0 3.0)) (Math/pow (:nws solvent) (/ 1.0 3.0))) 2))\n           (* -1 (:R pqr))\n           ))\n      ))&quot;, :offset 470, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(defn valloy [ca solute solvent] (nth (take 25 (iterate (fn [[va vb]]\n                                                           (let [cas1 (* ca (Math/pow va (/ 2.0 3.0)) (/ 1.0 (+ (* ca (Math/pow va (/ 2.0 3.0))) (* (- 1 ca) (Math/pow vb (/ 2.0 3.0))))))\n                                                                 cbs1 (- 1 cas1)\n                                                                 va1 (Math/pow (* (Math/pow (:vm solute) (/ 2.0 3.0)) (+ 1 (* (:a solute) (* cbs1 (+ 1 (* 8 cas1 cas1 cbs1 cbs1))) (- (:phi solute) (:phi solvent))))) (/ 3.0 2.0))\n                                                                 vb1 (Math/pow (* (Math/pow (:vm solvent) (/ 2.0 3.0)) (+ 1 (* (:a solvent) (* cas1 (+ 1 (* 8 cas1 cas1 cbs1 cbs1))) (- (:phi solvent) (:phi solute))))) (/ 3.0 2.0))\n                                                                 ]\n                                                             [va1 vb1]\n                                                             )) (let [cas (* ca (Math/pow (:vm solute) (/ 2.0 3.0)) (/ 1.0 (+ (* ca (Math/pow (:vm solute) (/ 2.0 3.0))) (* (- 1 ca) (Math/pow (:vm solvent) (/ 2.0 3.0))))))\n                                                                      cbs (- 1 cas)\n                                                                      ]\n                                                                  [(Math/pow (* (Math/pow (:vm solute) (/ 2.0 3.0)) (+ 1 (* (:a solute) (* cbs (+ 1 (* 8 cas cas cbs cbs))) (- (:phi solute) (:phi solvent))))) (/ 3.0 2.0))\n                                                                   (Math/pow (* (Math/pow (:vm solvent) (/ 2.0 3.0)) (+ 1 (* (:a solvent) cas (+ 1 (* 8 cas cas cbs cbs)) (- (:phi solvent) (:phi solute))))) (/ 3.0 2.0))\n                                                                   ])\n                                                         )) 19))&quot;, :offset 1886, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(defn formationEnthalpy [ca solute solvent]                 ;;ca is the concentration of solute\n   (let [va (first (valloy ca solute solvent))\n         vb (second (valloy ca solute solvent))\n         cas (* ca (Math/pow va (/ 2.0 3.0)) (/ 1.0 (+ (* ca (Math/pow va (/ 2.0 3.0))) (* (- 1 ca) (Math/pow vb (/ 2.0 3.0))))))\n         cbs (- 1 cas)\n         fc (* cbs (+ 1 (* 8 cas cas cbs cbs)))\n         ;vb (Math/pow (* (Math/pow (:vm solvent) (/ 2.0 3.0)) (+ 1 (* (:a solvent) cas (+ 1 (* 8 cas cas cbs cbs)) (- (:phi solvent) (:phi solute))))) (/ 3.0 2.0))\n         pqr (PQR solute solvent)\n         ]\n     (* 2 fc ca\n        (/ (Math/pow va (/ 2.0 3.0))\n           (+ (Math/pow (:nws solute) (/ -1.0 3.0))\n              (Math/pow (:nws solvent) (/ -1.0 3.0))))\n        (+ (* -1 (:P pqr) (Math/pow (- (:phi solute) (:phi solvent)) 2))\n           (* (:Q pqr) (Math/pow (- (Math/pow (:nws solute) (/ 1.0 3.0)) (Math/pow (:nws solvent) (/ 1.0 3.0))) 2))\n           (* -1 (:R pqr))\n           )\n        )))&quot;, :offset 1002, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(defn Eshelby [solute solvent]\n   (-&gt; 24 (* pi\n             (:bulkmodulus solvent)\n             (:shearmodulus solute)\n             (:atomicradius solute)\n             (:atomicradius solvent)\n             (Math/pow (- (:atomicradius solute) (:atomicradius solvent)) 2.0))\n       (/ (+ (* 3 (:bulkmodulus solvent) (:atomicradius solvent)) (* 4 (:shearmodulus solute) (:atomicradius solute))))))&quot;, :offset 393, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(defn GBEnthalpy [solute solvent] (+\n                                     (-&gt; (Eshelby solute solvent) (* Nav) (/ 1000))\n                                     (* -0.71 (/ 1.0 3.0) (/ 1.0 2.0)\n                                        (- (* c0 (:surfaceenergy solute) (Math/pow (* (:vm solute) 1.0e-6) (/ 2.0 3.0)))\n                                           (* c0 (:surfaceenergy solvent) (Math/pow (* (:vm solvent) 1.0e-6) (/ 2.0 3.0)))\n                                           (heatOfSolution solute solvent)))))&quot;, :offset 513, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(defn McLean \n   \&quot;Mclean Segregation law, which determines the concentration of solute in the grain boundary. Return the concentration of solute in the grain boundary. Note that the segregation enthalpy should use positive values here.\&quot; \n   [temperature, Hseg, Xbulk] \n   {:pre [(&gt;= Xbulk 0) (&lt;= Xbulk 1) (&gt;= temperature 0) (&gt;= Hseg 0)]}\n   (-&gt;&gt; (-&gt; Xbulk (/ (- 1 Xbulk)) (* (Math/exp  (/ Hseg k temperature)))) (/ 1.0) (+ 1.0) (/ 1.0)))&quot;, :offset 437, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(defn\n    McLeanComp \n    \&quot;Solve compositions in the grain interial and boundary. By the forumlae of (1) Mclean segregation law:Xig/(1-Xig)=Xb/(1-Xb)*exp(Hseg/kT) and (2) X=(1-fig)*Xb+fig*Xig. Where X is the global composition, Xb is the composition in the grain interial, Xig is the composition in the boundary, fig is the volume fraction of the boundary layer, which could be expressed as: fig=1-((d-t)/d)^D, where D is the dimensionality parameter. D=3 should be used for a general threedimensional polycrystal, while D=2 is useful for columnar or highly elongated grain structures and D=1 applies to lamellar or platelike grains.\&quot;\n    [globalComposition, grainSize, boundaryThickness, Dimensionality, temperature, Hseg] \n{:pre [(&gt;= globalComposition 0) (&lt;= globalComposition 1) (&lt; boundaryThickness grainSize) (&gt;= boundaryThickness 0)\n           (&gt;= Dimensionality 0) (&lt;= Dimensionality 3) (&gt;= temperature 0) (&gt;= Hseg 0)]}\n(let [X globalComposition,\n    d grainSize,\n    t boundaryThickness,\n    D Dimensionality,\n    T temperature,\n    H (* Hseg 1000.0) ;;since the unit of Hseg is kJ/mol, here we need J/mol\n    fig (- 1 (Math/pow (-&gt; d (- t) (/ d)) D))\n    ex (Math/exp (-&gt; -1 (* Hseg) (/ R T)))\n    a (* fig (- ex 1))\n    b (-&gt; 1 (- ex) (* fig) (+ (-&gt; 1 (- X) (* ex))) (+ X))\n    c (* -1.0 X)\n    Xig (-&gt; -1 (* b) (+ (Math/sqrt (-&gt; b (* b) (- (* 4.0 a c))))) (/ 2.0 a))\n    Xb (-&gt; X (- (* fig Xig)) (/ (- 1 fig)))] {:X X :Xig Xig :Xb Xb :fig fig}))&quot;, :offset 1456, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(def temperature 273)&quot;, :offset 21, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(defn GBEnergy \&quot;Grain boundary segregation and thermodynamically stable binary nanocrystalline alloys, Jason R. Trelewicz and Christopher A. Schuh. PHYSICAL REVIEW B 79, 094112 (2009), http://dx.doi.org/10.1103/PhysRevB.79.094112  Eq. 25(b), note that the atomic volume is of the solvent\&quot;\n    [gA, boundaryThickness, Xig, atomicVolume, Hseg, temperature, Xb]\n   (-&gt; gA (- (-&gt; boundaryThickness (* Xig) (/ atomicVolume) (* (+ (/ (* Hseg 1000) Nav) (* k temperature (Math/log Xb))))))))&quot;, :offset 484, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(comment \n(GBEnergy 0,0.5e-9,0.0100398,(-&gt; Math/PI (* 4.0) (/ 3.0) (* (Math/pow (:atomicradius Cu) 3.0))),10,300,0.0099999)\n(-&gt; Math/PI (* 4.0) (/ 3.0) (* (Math/pow (:atomicradius Cu) 3.0)))\n(McLeanComp 0.01 100.0e-6,0.5e-9,3.0,300,10)\n(map #(McLeanComp % 100.0e-6,0.5e-9,3.0,298,10) [0.01 0.02 0.03]))&quot;, :offset 302, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(defn GBEnergy1\n   \&quot;Equation (1) in H.A. Murdoch, C.A. Schuh, Estimation of grain boundary segregation enthalpy and its role in stable nanocrystalline alloy design, Journal of Materials Research. 28 (2013) 2154–2163. doi:10.1557/jmr.2013.211.\&quot;\n   [g0 soluteExcess segregationEnthalpy Temperature soluteContent]\n   (- g0 (* soluteExcess (- segregationEnthalpy (* k temperature (Math/log soluteContent))))))&quot;, :offset 405, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(def cwidth 888)&quot;, :offset 16, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(def cheight 666)&quot;, :offset 17, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(defn getChart [solute solvent]\n   (let [mychart (XYChart. cwidth cheight)\n         ;;sw (SwingWrapper. mychart)\n         xdata (take 201 (iterate #(+ % (/ 1.0 200.0)) 0))         \n         ydata (map #(formationEnthalpy % solute solvent) xdata)]\n     (.setTitle mychart (str \&quot;Miedema Formation Enthalpy \&quot; (:name solvent) \&quot;-\&quot; (:name solute)))\n     (.setXAxisTitle mychart (str (:name solute) \&quot;(at.%)\&quot;))\n     (.setYAxisTitle mychart \&quot;Formation Enthalpy (kJ/mol)\&quot;)\n     (.setLegendPosition (.getStyler mychart) Styler$LegendPosition/InsideSW)\n     (.addSeries mychart (str (:name solvent) \&quot;-\&quot; (:name solute)), xdata, ydata)\n     ;;(.displayChart sw)\n     (println (str \&quot;solvent-solute(\&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot;)\&quot;))\n     (println \&quot;Heat of solution(kJ/mol):\&quot;)\n     (println (str (:name solute) \&quot; in \&quot; (:name solvent) \&quot;:\&quot; (heatOfSolution solute solvent)))\n     (println (str (:name solvent) \&quot; in \&quot; (:name solute) \&quot;:\&quot; (heatOfSolution solvent solute)))\n     (println \&quot;Grain boundary segregation enthalpy(kJ/mol):\&quot;)\n     (println (GBEnthalpy solute solvent))\n     mychart\n     ))&quot;, :offset 1084, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(defn getGBEChart [solute solvent]\n   (let [mychart (XYChart. cwidth cheight)\n         ;;sw (SwingWrapper. mychart)\n         xdata (take 201 (iterate #(+ % (/ 0.01 200.0)) 0))\n         hseg (GBEnthalpy solute solvent)\n         mcleancomp (map #(McLeanComp % 100.0e-6,0.5e-9,3.0,298,hseg) xdata)\n         xig (map #(:Xig %) mcleancomp)\n         xb  (map #(:Xb %) mcleancomp)\n         ydata (map #(GBEnergy 0 0.5e-9 %1 (-&gt; Math/PI (* 4.0) (/ 3.0) (* (Math/pow (:atomicradius solvent) 3.0))) hseg 298 %2) xig xb)];;todo,what is the grain boundary energy of an pure metal?? need solution\n     (.setTitle mychart (str \&quot;Grain boundary energy \&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot; @T=298 K,d=100 um\&quot;))\n     (.setXAxisTitle mychart (str (:name solute) \&quot;(at.%)\&quot;))\n     (.setYAxisTitle mychart \&quot;GB engergy(J/m2)\&quot;)\n     (.setLegendPosition (.getStyler mychart) Styler$LegendPosition/InsideSW)\n     (.addSeries mychart (str (:name solvent) \&quot;-\&quot; (:name solute)), xdata, ydata)\n     ;;(.displayChart sw)\n    ;; (println (str \&quot;solvent-solute(\&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot;)\&quot;))\n    ;; (println \&quot;Heat of solution(kJ/mol):\&quot;)\n    ;; (println (str (:name solute) \&quot; in \&quot; (:name solvent) \&quot;:\&quot; (heatOfSolution solute solvent)))\n    ;; (println (str (:name solvent) \&quot; in \&quot; (:name solute) \&quot;:\&quot; (heatOfSolution solvent solute)))\n    ;; (println \&quot;Grain boundary segregation enthalpy(kJ/mol):\&quot;)\n    ;; (println (GBEnthalpy solute solvent))\n     mychart\n     ))&quot;, :offset 1438, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(defn getGBEvsSizeChart [solute solvent content]\n   (let [mychart (XYChart. cwidth cheight)\n         ;;sw (SwingWrapper. mychart)\n         xdata (range 1 1000) ;;grain size unit: nm\n         hseg (GBEnthalpy solute solvent)\n         mcleancomp (map #(McLeanComp content (* % 1.0e-9),0.5e-9,3.0,298,hseg) xdata)\n         xig (map #(:Xig %) mcleancomp)\n         xb  (map #(:Xb %) mcleancomp)\n         ydata (map #(GBEnergy 0 0.5e-9 %1 (-&gt; Math/PI (* 4.0) (/ 3.0) (* (Math/pow (:atomicradius solvent) 3.0))) hseg 298 %2) xig xb)];;todo,what is the grain boundary energy of an pure metal?? need solution\n     (.setTitle mychart (str \&quot;Grain boundary energy \&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot; @T=298 K\&quot;))\n     (.setXAxisTitle mychart (\&quot;Grain size(nm)\&quot;))\n     (.setYAxisTitle mychart \&quot;GB engergy(J/m^2)\&quot;)\n     (.setLegendPosition (.getStyler mychart) Styler$LegendPosition/InsideSW)\n     (.addSeries mychart (str (:name solvent) \&quot;(1-x)\&quot; (:name solute) \&quot;(x), x=\&quot; content), xdata, ydata)\n     ;;(.displayChart sw)\n    ;; (println (str \&quot;solvent-solute(\&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot;)\&quot;))\n    ;; (println \&quot;Heat of solution(kJ/mol):\&quot;)\n    ;; (println (str (:name solute) \&quot; in \&quot; (:name solvent) \&quot;:\&quot; (heatOfSolution solute solvent)))\n    ;; (println (str (:name solvent) \&quot; in \&quot; (:name solute) \&quot;:\&quot; (heatOfSolution solvent solute)))\n    ;; (println \&quot;Grain boundary segregation enthalpy(kJ/mol):\&quot;)\n    ;; (println (GBEnthalpy solute solvent))\n     mychart\n     ))&quot;, :offset 1457, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(ns thermodynmetal.core\n  (:gen-class))&quot;, :offset 39, :ns &quot;user&quot;} {:command &quot;(use 'seesaw.core)&quot;, :offset 18, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(use 'seesaw.mig)&quot;, :offset 17, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(use 'seesaw.table)&quot;, :offset 19, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(import '(org.knowm.xchart XChartPanel)\n        '(java.io File))&quot;, :offset 64, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(def atomSets [Ag Cu Zn Fe C Al Mg Ni N H Y Cr Sr Sc Ti V Mo Co Li Na Ga In Tl Sn Pb Sb Bi Pd Au Mn Zr Nb Tc Ta W Pt La Re Rh Ru Gd Ca B Cd])&quot;, :offset 141, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(def atoms {\&quot;Ag\&quot; Ag \&quot;Cu\&quot; Cu \&quot;Zn\&quot; Zn \&quot;Fe\&quot; Fe \&quot;C\&quot; C \&quot;Al\&quot; Al \&quot;Mg\&quot; Mg \&quot;Ni\&quot; Ni \&quot;N\&quot; N \&quot;H\&quot; H \&quot;Y\&quot; Y \&quot;Cr\&quot; Cr \&quot;Sr\&quot; Sr \&quot;Sc\&quot; Sc \&quot;Ti\&quot; Ti \&quot;V\&quot; V \&quot;Mo\&quot; Mo \&quot;Co\&quot; Co \&quot;Li\&quot; Li \&quot;Na\&quot; Na \&quot;Ga\&quot; Ga \&quot;In\&quot; In \&quot;Tl\&quot; Tl \&quot;Sn\&quot; Sn \&quot;Pb\&quot; Pb \&quot;Sb\&quot; Sb \&quot;Bi\&quot; Bi \&quot;Pd\&quot; Pd \&quot;Au\&quot; Au \&quot;Mn\&quot; Mn \&quot;Zr\&quot; Zr \&quot;Nb\&quot; Nb \&quot;Tc\&quot; Tc \&quot;Ta\&quot; Ta \&quot;W\&quot; W \&quot;Pt\&quot; Pt \&quot;La\&quot; La \&quot;Re\&quot; Re \&quot;Rh\&quot; Rh \&quot;Ru\&quot; Ru \&quot;Gd\&quot; Gd \&quot;Ca\&quot; Ca \&quot;B\&quot; B \&quot;Cd\&quot; Cd})&quot;, :offset 351, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(native!)&quot;, :offset 9, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(def myicon (icon (File. \&quot;ico.ico\&quot;)))&quot;, :offset 37, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(def f (frame :title \&quot;Miedema for binary\&quot;\n              :icon myicon\n              :width 888\n              :height 666))&quot;, :offset 121, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(defn display [content]\n  (config! f :content content)\n  content)&quot;, :offset 65, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(def myframe (frame :title \&quot;Miedema Enthalpy\&quot;\n                    :icon myicon\n                    :width 888\n                    :height 666))&quot;, :offset 143, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(def soluteLabel (label \&quot;solute:\&quot;))\n(def solventLabel (label \&quot;solvent:\&quot;))\n(def soluteText (text \&quot;Zn\&quot;))\n(def solventText (text \&quot;Cu\&quot;))\n(def contentLabel (label \&quot;content:\&quot;))\n(def contentText (text \&quot;0.5\&quot;))\n(def enthalpyValue (label \&quot;\&quot;))\n(def enthalpyUnit (label \&quot; kJ/mol\&quot;))\n(def myButton (button :text \&quot;Formation Enthalpy\&quot;))\n(def GBEnergyBtn (button :text \&quot;GB Energy plot\&quot;))\n(def GBEvsSizeBtn (button :text \&quot;GB Energy vs grain size\&quot;))\n(def GBSTableB (button :text  \&quot;GB Hseg\&quot;))\n(def GBSTable (table :model [:columns [:elements :Ag :Cu :Zn :Fe :C :Al :Mg :Ni :N :H :Y :Cr :Sr :Sc :Ti :V :Mo :Co :Li :Na :Ga :In :Tl :Sn :Pb :Sb :Bi :Pd :Au :Mn :Zr :Nb :Tc :Ta :W :Pt :La :Re :Rh :Ru :Gd :Ca :B :Cd]\n                             :rows [{:elements \&quot;Ag\&quot;} {:elements \&quot;Cu\&quot;} {:elements \&quot;Zn\&quot;} {:elements \&quot;Fe\&quot;} {:elements \&quot;C\&quot;} {:elements \&quot;Al\&quot;} {:elements \&quot;Mg\&quot;} {:elements \&quot;Ni\&quot;} {:elements \&quot;N\&quot;} {:elements \&quot;H\&quot;} {:elements \&quot;Y\&quot;} {:elements \&quot;Cr\&quot;} {:elements \&quot;Sr\&quot;} {:elements \&quot;Sc\&quot;} {:elements \&quot;Ti\&quot;} {:elements \&quot;V\&quot;} {:elements \&quot;Mo\&quot;} {:elements \&quot;Co\&quot;} {:elements \&quot;Li\&quot;} {:elements \&quot;Na\&quot;} {:elements \&quot;Ga\&quot;} {:elements \&quot;In\&quot;} {:elements \&quot;Tl\&quot;} {:elements \&quot;Sn\&quot;} {:elements \&quot;Pb\&quot;} {:elements \&quot;Sb\&quot;} {:elements \&quot;Bi\&quot;} {:elements \&quot;Pd\&quot;} {:elements \&quot;Au\&quot;} {:elements \&quot;Mn\&quot;} {:elements \&quot;Zr\&quot;} {:elements \&quot;Nb\&quot;} {:elements \&quot;Tc\&quot;} {:elements \&quot;Ta\&quot;} {:elements \&quot;W\&quot;} {:elements \&quot;Pt\&quot;} {:elements \&quot;La\&quot;} {:elements \&quot;Re\&quot;} {:elements \&quot;Rh\&quot;} {:elements \&quot;Ru\&quot;} {:elements \&quot;Gd\&quot;} {:elements \&quot;Ca\&quot;} {:elements \&quot;B\&quot;} {:elements \&quot;Cd\&quot;}]]))&quot;, :offset 1472, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(def logs (text :multi-line? true :rows 30 :text \&quot;Results are shown here\&quot;))&quot;, :offset 75, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(def myPanel (mig-panel\n               :constraints [\&quot;\&quot; \&quot;[shrink 0]20px[200, grow, fill]\&quot; \&quot;[shrink 0]5px[grow]\&quot;]\n               :items [[soluteLabel]\n                       [soluteText]\n                       [solventLabel]\n                       [solventText]\n                       [contentLabel]\n                       [contentText]                       \n                       [enthalpyValue]\n                       [enthalpyUnit \&quot;wrap\&quot;]\n                       [myButton]\n                       [GBEnergyBtn]\n                       [GBEvsSizeBtn]\n                       [GBSTableB]\n                       [(scrollable logs) \&quot;cell 1 2 7 30\&quot;]]))&quot;, :offset 648, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(display myPanel)&quot;, :offset 17, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(listen myButton :action (fn [e]\n                           (let [solute (atoms (text soluteText)) solvent (atoms (text solventText))]\n                             (config! myframe :content (XChartPanel. (getChart solute solvent)))\n                             (text! logs (str (text logs) \&quot;\\nsolvent-solute(\&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot;)\\n\&quot;\n                                              \&quot;Heat of solution(kJ/mol):\\n\&quot;\n                                              (str (:name solute) \&quot; in \&quot; (:name solvent) \&quot;:\&quot; (format \&quot;%.2f\&quot; (heatOfSolution solute solvent)) \&quot;\\n\&quot;)\n                                              (str (:name solvent) \&quot; in \&quot; (:name solute) \&quot;:\&quot; (format \&quot;%.2f\&quot; (heatOfSolution solvent solute)) \&quot;\\n\&quot;)\n                                              \&quot;Grain boundary segregation enthalpy(kJ/mol):\\n\&quot;\n                                              (str (:name solute) \&quot; in \&quot; (:name solvent) (format \&quot;: %.2f\&quot; (GBEnthalpy solute solvent)))))                             ;;(config! f :visible? false)\n                             (config! enthalpyValue :text (format \&quot;%.2f\&quot; (formationEnthalpy (read-string (second (re-matches (re-pattern \&quot;(\\\\d+\\\\.{0,1}\\\\d+).*\&quot;) (text contentText)))) solute solvent)))\n                           ;;(config! f :visible? true)\n                             (config! myframe :visible? true))))&quot;, :offset 1333, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(listen GBEvsSizeBtn :action(fn [e] \n                              (config! myframe :content (XChartPanel. (getGBEvsSizeChart solute solvent 1.0e-3)))\n                              (config! myframe :visible? true) ))&quot;, :offset 216, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(listen GBSTableB :action (fn [e]\n                            (do\n                              (doseq [rowid (range 44)]\n                                (let [a (nth atomSets rowid)]\n                                (update-at! GBSTable rowid [(:name a) (format \&quot;%.1f\&quot; (GBEnthalpy Ag a)) (format \&quot;%.1f\&quot; (GBEnthalpy Cu a)) (format \&quot;%.1f\&quot; (GBEnthalpy Zn a)) (format \&quot;%.1f\&quot; (GBEnthalpy Fe a)) (format \&quot;%.1f\&quot; (GBEnthalpy C a)) (format \&quot;%.1f\&quot; (GBEnthalpy Al a)) (format \&quot;%.1f\&quot; (GBEnthalpy Mg a)) (format \&quot;%.1f\&quot; (GBEnthalpy Ni a)) (format \&quot;%.1f\&quot; (GBEnthalpy N a)) (format \&quot;%.1f\&quot; (GBEnthalpy H a)) (format \&quot;%.1f\&quot; (GBEnthalpy Y a)) (format \&quot;%.1f\&quot; (GBEnthalpy Cr a)) (format \&quot;%.1f\&quot; (GBEnthalpy Sr a)) (format \&quot;%.1f\&quot; (GBEnthalpy Sc a)) (format \&quot;%.1f\&quot; (GBEnthalpy Ti a)) (format \&quot;%.1f\&quot; (GBEnthalpy V a)) (format \&quot;%.1f\&quot; (GBEnthalpy Mo a)) (format \&quot;%.1f\&quot; (GBEnthalpy Co a)) (format \&quot;%.1f\&quot; (GBEnthalpy Li a)) (format \&quot;%.1f\&quot; (GBEnthalpy Na a)) (format \&quot;%.1f\&quot; (GBEnthalpy Ga a)) (format \&quot;%.1f\&quot; (GBEnthalpy In a)) (format \&quot;%.1f\&quot; (GBEnthalpy Tl a)) (format \&quot;%.1f\&quot; (GBEnthalpy Sn a)) (format \&quot;%.1f\&quot; (GBEnthalpy Pb a)) (format \&quot;%.1f\&quot; (GBEnthalpy Sb a)) (format \&quot;%.1f\&quot; (GBEnthalpy Bi a)) (format \&quot;%.1f\&quot; (GBEnthalpy Pd a)) (format \&quot;%.1f\&quot; (GBEnthalpy Au a)) (format \&quot;%.1f\&quot; (GBEnthalpy Mn a)) (format \&quot;%.1f\&quot; (GBEnthalpy Zr a)) (format \&quot;%.1f\&quot; (GBEnthalpy Nb a)) (format \&quot;%.1f\&quot; (GBEnthalpy Tc a)) (format \&quot;%.1f\&quot; (GBEnthalpy Ta a)) (format \&quot;%.1f\&quot; (GBEnthalpy W a)) (format \&quot;%.1f\&quot; (GBEnthalpy Pt a)) (format \&quot;%.1f\&quot; (GBEnthalpy La a)) (format \&quot;%.1f\&quot; (GBEnthalpy Re a)) (format \&quot;%.1f\&quot; (GBEnthalpy Rh a)) (format \&quot;%.1f\&quot; (GBEnthalpy Ru a)) (format \&quot;%.1f\&quot; (GBEnthalpy Gd a)) (format \&quot;%.1f\&quot; (GBEnthalpy Ca a)) (format \&quot;%.1f\&quot; (GBEnthalpy B a)) (format \&quot;%.1f\&quot; (GBEnthalpy Cd a))])))\n                           (config! myframe :content (scrollable GBSTable))\n                            (config! myframe :visible? true))))&quot;, :offset 1886, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(defn -main\n  \&quot;I don't do a whole lot ... yet.\&quot;\n  [&amp; args]\n  (-&gt; f show!))&quot;, :offset 74, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(listen GBEvsSizeBtn :action(fn [e]\n                              (config! myframe :content (XChartPanel. (getGBEvsSizeChart solute solvent 1.0e-3)))\n                              (config! myframe :visible? true) ))&quot;, :offset 215, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(use 'thermodynmetal.miedema)&quot;, :offset 29, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(defn getGBEvsSizeChart [solute solvent content]\n   (let [mychart (XYChart. cwidth cheight)\n         ;;sw (SwingWrapper. mychart)\n         xdata (range 1 1000) ;;grain size unit: nm\n         hseg (GBEnthalpy solute solvent)\n         mcleancomp (map #(McLeanComp content (* % 1.0e-9),0.5e-9,3.0,298,hseg) xdata)\n         xig (map #(:Xig %) mcleancomp)\n         xb  (map #(:Xb %) mcleancomp)\n         ydata (map #(GBEnergy 0 0.5e-9 %1 (-&gt; Math/PI (* 4.0) (/ 3.0) (* (Math/pow (:atomicradius solvent) 3.0))) hseg 298 %2) xig xb)];;todo,what is the grain boundary energy of an pure metal?? need solution\n     (.setTitle mychart (str \&quot;Grain boundary energy \&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot; @T=298 K\&quot;))\n     (.setXAxisTitle mychart \&quot;Grain size(nm)\&quot;)\n     (.setYAxisTitle mychart \&quot;GB engergy(J/m^2)\&quot;)\n     (.setLegendPosition (.getStyler mychart) Styler$LegendPosition/InsideSW)\n     (.addSeries mychart (str (:name solvent) \&quot;(1-x)\&quot; (:name solute) \&quot;(x), x=\&quot; content), xdata, ydata)\n     ;;(.displayChart sw)\n    ;; (println (str \&quot;solvent-solute(\&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot;)\&quot;))\n    ;; (println \&quot;Heat of solution(kJ/mol):\&quot;)\n    ;; (println (str (:name solute) \&quot; in \&quot; (:name solvent) \&quot;:\&quot; (heatOfSolution solute solvent)))\n    ;; (println (str (:name solvent) \&quot; in \&quot; (:name solute) \&quot;:\&quot; (heatOfSolution solvent solute)))\n    ;; (println \&quot;Grain boundary segregation enthalpy(kJ/mol):\&quot;)\n    ;; (println (GBEnthalpy solute solvent))\n     mychart\n     ))&quot;, :offset 1455, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(defn getGBEvsSizeChart [solute solvent content]\n   (let [mychart (XYChart. cwidth cheight)\n         ;;sw (SwingWrapper. mychart)\n         xdata (range 1 1000) ;;grain size unit: nm\n         hseg (GBEnthalpy solute solvent)\n         mcleancomp (map #(McLeanComp content (* % 1.0e-9),0.5e-9,3.0,298,hseg) xdata)\n         xig (map #(:Xig %) mcleancomp)\n         xb  (map #(:Xb %) mcleancomp)\n         ydata (map #(GBEnergy 0 0.5e-9 %1 (-&gt; Math/PI (* 4.0) (/ 3.0) (* (Math/pow (:atomicradius solvent) 3.0))) hseg 298 %2) xig xb)];;todo,what is the grain boundary energy of an pure metal?? need solution\n     (.setTitle mychart (str \&quot;Grain boundary energy \&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot; @T=298 K\&quot;))\n     (.setXAxisTitle mychart \&quot;Grain size(nm)\&quot;)\n     (.setYAxisTitle mychart \&quot;GB engergy(J/m^2)\&quot;)\n     (.setLegendPosition (.getStyler mychart) Styler$LegendPosition/InsideE)\n     (.addSeries mychart (str (:name solvent) \&quot;(1-x)\&quot; (:name solute) \&quot;(x), x=\&quot; content), xdata, ydata)\n     ;;(.displayChart sw)\n    ;; (println (str \&quot;solvent-solute(\&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot;)\&quot;))\n    ;; (println \&quot;Heat of solution(kJ/mol):\&quot;)\n    ;; (println (str (:name solute) \&quot; in \&quot; (:name solvent) \&quot;:\&quot; (heatOfSolution solute solvent)))\n    ;; (println (str (:name solvent) \&quot; in \&quot; (:name solute) \&quot;:\&quot; (heatOfSolution solvent solute)))\n    ;; (println \&quot;Grain boundary segregation enthalpy(kJ/mol):\&quot;)\n    ;; (println (GBEnthalpy solute solvent))\n     mychart\n     ))&quot;, :offset 1454, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(defn getGBEvsSizeChart [solute solvent content]\n   (let [mychart (XYChart. cwidth cheight)\n         ;;sw (SwingWrapper. mychart)\n         xdata (range 1 1000) ;;grain size unit: nm\n         hseg (GBEnthalpy solute solvent)\n         mcleancomp (map #(McLeanComp content (* % 1.0e-9),0.5e-9,3.0,298,hseg) xdata)\n         xig (map #(:Xig %) mcleancomp)\n         xb  (map #(:Xb %) mcleancomp)\n         ydata (map #(GBEnergy 0 0.5e-9 %1 (-&gt; Math/PI (* 4.0) (/ 3.0) (* (Math/pow (:atomicradius solvent) 3.0))) hseg 298 %2) xig xb)];;todo,what is the grain boundary energy of an pure metal?? need solution\n     (.setTitle mychart (str \&quot;Grain boundary energy \&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot; @T=298 K\&quot;))\n     (.setXAxisTitle mychart \&quot;Grain size(nm)\&quot;)\n     (.setYAxisTitle mychart \&quot;GB engergy(J/m^2)\&quot;)\n     (.setLegendPosition (.getStyler mychart) Styler$LegendPosition/InsideNE)\n     (.addSeries mychart (str (:name solvent) \&quot;(1-x)\&quot; (:name solute) \&quot;(x), x=\&quot; content), xdata, ydata)\n     ;;(.displayChart sw)\n    ;; (println (str \&quot;solvent-solute(\&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot;)\&quot;))\n    ;; (println \&quot;Heat of solution(kJ/mol):\&quot;)\n    ;; (println (str (:name solute) \&quot; in \&quot; (:name solvent) \&quot;:\&quot; (heatOfSolution solute solvent)))\n    ;; (println (str (:name solvent) \&quot; in \&quot; (:name solute) \&quot;:\&quot; (heatOfSolution solvent solute)))\n    ;; (println \&quot;Grain boundary segregation enthalpy(kJ/mol):\&quot;)\n    ;; (println (GBEnthalpy solute solvent))\n     mychart\n     ))&quot;, :offset 1455, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(defn getGBEvsSizeChart [solute solvent content]\n   (let [mychart (XYChart. cwidth cheight)\n         ;;sw (SwingWrapper. mychart)\n         xdata (range 1 300) ;;grain size unit: nm\n         hseg (GBEnthalpy solute solvent)\n         mcleancomp (map #(McLeanComp content (* % 1.0e-9),0.5e-9,3.0,298,hseg) xdata)\n         xig (map #(:Xig %) mcleancomp)\n         xb  (map #(:Xb %) mcleancomp)\n         ydata (map #(GBEnergy 0 0.5e-9 %1 (-&gt; Math/PI (* 4.0) (/ 3.0) (* (Math/pow (:atomicradius solvent) 3.0))) hseg 298 %2) xig xb)];;todo,what is the grain boundary energy of an pure metal?? need solution\n     (.setTitle mychart (str \&quot;Grain boundary energy \&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot; @T=298 K\&quot;))\n     (.setXAxisTitle mychart \&quot;Grain size(nm)\&quot;)\n     (.setYAxisTitle mychart \&quot;GB engergy(J/m^2)\&quot;)\n     (.setLegendPosition (.getStyler mychart) Styler$LegendPosition/InsideNE)\n     (.addSeries mychart (str (:name solvent) \&quot;(1-x)\&quot; (:name solute) \&quot;(x), x=\&quot; content), xdata, ydata)\n     ;;(.displayChart sw)\n    ;; (println (str \&quot;solvent-solute(\&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot;)\&quot;))\n    ;; (println \&quot;Heat of solution(kJ/mol):\&quot;)\n    ;; (println (str (:name solute) \&quot; in \&quot; (:name solvent) \&quot;:\&quot; (heatOfSolution solute solvent)))\n    ;; (println (str (:name solvent) \&quot; in \&quot; (:name solute) \&quot;:\&quot; (heatOfSolution solvent solute)))\n    ;; (println \&quot;Grain boundary segregation enthalpy(kJ/mol):\&quot;)\n    ;; (println (GBEnthalpy solute solvent))\n     mychart\n     ))&quot;, :offset 1454, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(defn getGBEvsSizeChart [solute solvent content]\n   (let [mychart (XYChart. cwidth cheight)\n         ;;sw (SwingWrapper. mychart)\n         xdata (range 1 300) ;;grain size unit: nm\n         hseg (GBEnthalpy solute solvent)\n         mcleancomp (map #(McLeanComp content (* % 1.0e-9),0.5e-9,3.0,298,hseg) xdata)\n         xig (map #(:Xig %) mcleancomp)\n         xb  (map #(:Xb %) mcleancomp)\n         ydata (map #(GBEnergy 0 0.5e-9 %1 (-&gt; Math/PI (* 4.0) (/ 3.0) (* (Math/pow (:atomicradius solvent) 3.0))) hseg 298 %2) xig xb)];;todo,what is the grain boundary energy of an pure metal?? need solution\n     (view xy-plot xdata,ydata \n           :legend true\n           :title \&quot;sample\&quot;\n           :x-label \&quot;Grain size(nm)\&quot;\n           :ylabel \&quot;GB energy(J/m^2)\&quot;)\n     (.setTitle mychart (str \&quot;Grain boundary energy \&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot; @T=298 K\&quot;))\n     (.setXAxisTitle mychart \&quot;Grain size(nm)\&quot;)\n     (.setYAxisTitle mychart \&quot;GB engergy(J/m^2)\&quot;)\n     (.setLegendPosition (.getStyler mychart) Styler$LegendPosition/InsideNE)\n     (.addSeries mychart (str (:name solvent) \&quot;(1-x)\&quot; (:name solute) \&quot;(x), x=\&quot; content), xdata, ydata)\n     ;;(.displayChart sw)\n    ;; (println (str \&quot;solvent-solute(\&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot;)\&quot;))\n    ;; (println \&quot;Heat of solution(kJ/mol):\&quot;)\n    ;; (println (str (:name solute) \&quot; in \&quot; (:name solvent) \&quot;:\&quot; (heatOfSolution solute solvent)))\n    ;; (println (str (:name solvent) \&quot; in \&quot; (:name solute) \&quot;:\&quot; (heatOfSolution solvent solute)))\n    ;; (println \&quot;Grain boundary segregation enthalpy(kJ/mol):\&quot;)\n    ;; (println (GBEnthalpy solute solvent))\n     mychart\n     ))&quot;, :offset 1613, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(defn getGBEvsSizeChart [solute solvent content]\n   (let [mychart (XYChart. cwidth cheight)\n         ;;sw (SwingWrapper. mychart)\n         xdata (range 1 300) ;;grain size unit: nm\n         hseg (GBEnthalpy solute solvent)\n         mcleancomp (map #(McLeanComp content (* % 1.0e-9),0.5e-9,3.0,298,hseg) xdata)\n         xig (map #(:Xig %) mcleancomp)\n         xb  (map #(:Xb %) mcleancomp)\n         ydata (map #(GBEnergy 0 0.5e-9 %1 (-&gt; Math/PI (* 4.0) (/ 3.0) (* (Math/pow (:atomicradius solvent) 3.0))) hseg 298 %2) xig xb)];;todo,what is the grain boundary energy of an pure metal?? need solution\n     (view xy-plot xdata,ydata\n           :legend true\n           :title \&quot;sample\&quot;\n           :x-label \&quot;Grain size(nm)\&quot;\n           :ylabel \&quot;GB energy(J/m^2)\&quot;)\n     (.setTitle mychart (str \&quot;Grain boundary energy \&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot; @T=298 K\&quot;))\n     (.setXAxisTitle mychart \&quot;Grain size(nm)\&quot;)\n     (.setYAxisTitle mychart \&quot;GB engergy(J/m^2)\&quot;)\n     (.setLegendPosition (.getStyler mychart) Styler$LegendPosition/InsideNE)\n     (.addSeries mychart (str (:name solvent) \&quot;(1-x)\&quot; (:name solute) \&quot;(x), x=\&quot; content), xdata, ydata)\n     ;;(.displayChart sw)\n    ;; (println (str \&quot;solvent-solute(\&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot;)\&quot;))\n    ;; (println \&quot;Heat of solution(kJ/mol):\&quot;)\n    ;; (println (str (:name solute) \&quot; in \&quot; (:name solvent) \&quot;:\&quot; (heatOfSolution solute solvent)))\n    ;; (println (str (:name solvent) \&quot; in \&quot; (:name solute) \&quot;:\&quot; (heatOfSolution solvent solute)))\n    ;; (println \&quot;Grain boundary segregation enthalpy(kJ/mol):\&quot;)\n    ;; (println (GBEnthalpy solute solvent))\n     mychart\n     ))&quot;, :offset 1612, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(ns thermodynmetal.miedema\n   (:gen-class)\n   (:import (org.knowm.xchart XChartPanel)))\n \n (import '(java.lang Math)\n         '(org.knowm.xchart XYSeries)\n         '(org.knowm.xchart SwingWrapper)\n         '(org.knowm.xchart XYChart)\n         '(org.knowm.xchart XChartPanel)\n         '(org.knowm.xchart.style Styler$LegendPosition)\n         '(javax.swing JComponent))\n ;;(use 'seesaw.core)\n(use 'incanter.charts)\n \n \n ;;units, volume:cm^3\n ;;surface energy: kJ/m^2\n ;;modulus: Pa\n ;;melting point: K\n ;;atomic radius: m\n (def Nav 6.02e23)                                           ;;Avogadro constant\n (def k 1.38064852e-23)                                      ;;Boltzmann constant\n (def R 8.3144598)                                           ;;Gas constant\n (def c0 4.5e8)                                              ;;dimensionless semi-empirical constant\n (def pi Math/PI)\n \n (defrecord atomInfo [name, a, transition, bulkmodulus, shearmodulus, meltingpoint, surfaceenergy, phi, nws, vm, R, atomicradius])\n (def Ag (-&gt;atomInfo \&quot;Ag\&quot;, 0.07, true, 100.7e9, 28.65e9, 1234, 0.00125, 4.35, 2.52, 10.2, 0.15, 165e-12))\n (def Cu (-&gt;atomInfo \&quot;Cu\&quot;, 0.07, true, 131e9, 45.13e9, 1357.6, 0.001825, 4.45, 3.18, 7.092, 0.3, 145e-12))\n (def Zn (-&gt;atomInfo \&quot;Zn\&quot;, 0.1, false, 59.85e9, 37.18e9, 692.73, 0.00099, 4.1, 2.3, 9.157, 1.4, 142e-12))\n (def Fe (-&gt;atomInfo \&quot;Fe\&quot;, 0.04, true, 168.3e9, 81.52e9, 1809, 0.002475, 4.93, 5.55, 7.1, 1, 156e-12))\n (def C (-&gt;atomInfo \&quot;C\&quot;, 0.04, false, 545.4e9, 451.3e9, 4100, 0, 6.24, 5.55, 3.2, 2.1, 67e-12))\n (def Al (-&gt;atomInfo \&quot;Al\&quot;, 0.07, false, 72.18e9, 26.59e9, 933.25, 0.00116, 4.2, 2.7, 9.993, 1.9, 118e-12))\n (def Mg (-&gt;atomInfo \&quot;Mg\&quot;, 0.1, false, 35.4e9, 17.36e9, 922, 0.00076, 3.45, 1.6, 14, 0.4, 145e-12))\n (def Ni (-&gt;atomInfo \&quot;Ni\&quot;, 0.04, true, 186.4e9, 75.05e9, 1726, 0.0245, 5.20, 5.36, 6.6, 1, 149e-12))\n (def N (-&gt;atomInfo \&quot;N\&quot;, 0.04, false, 0, 0, 63.14, 0, 6.86, 4.49, 4.1, 2.3, 56e-12))\n (def H (-&gt;atomInfo \&quot;H\&quot;, 0.14, false, 0, 0, 14.025, 0, 5.2, 3.38, 1.7, 3.9, 53e-12))\n (def Y (-&gt;atomInfo \&quot;Y\&quot;, 0.07, true, 36.62e9, 25.8e9, 1799, 0.001125, 3.2, 1.77, 19.9, 0.7, 212e-12))\n (def Cr (-&gt;atomInfo \&quot;Cr\&quot;, 0.04, true, 190.3e9, 116.7e9, 2130, 0.0023, 4.65, 5.18, 7.2, 1.0, 166e-12))\n (def Sr (-&gt;atomInfo \&quot;Sr\&quot;, 0.1, true, 11.62e9, 5.229e9, 1041, 0.00041, 2.4, 0.59, 33.9, 0.4, 219e-12))\n (def Sc (-&gt;atomInfo \&quot;Sc\&quot;, 0.07, true, 57.9e9, 31.29e9, 1812, 0.001275, 3.25, 2.05, 15, 0.7, 184e-12))\n (def Ti (-&gt;atomInfo \&quot;Ti\&quot;, 0.04, true, 105.2e9, 39.34e9, 1943, 0.0021, 3.8, 3.51, 10.6, 1.0, 176e-12))\n (def V (-&gt;atomInfo \&quot;V\&quot;, 0.04, true, 162e9, 46.5e9, 2175, 0.00255, 4.25, 4.41, 8.4, 1.0, 171e-12))\n (def Mo (-&gt;atomInfo \&quot;Mo\&quot;, 0.04, true, 272.6e9, 115.8e9, 2890, 0.003, 4.65, 5.55, 9.4, 1.0, 190e-12))\n (def Co (-&gt;atomInfo \&quot;Co\&quot;, 0.04, true, 191.5e9, 76.42e9, 1768, 0.00255, 5.1, 5.36, 6.7, 1.0, 152e-12))\n (def Li (-&gt;atomInfo \&quot;Li\&quot;, 0.14, false, 11.58e9, 4.228e9, 453.7, 0.000525, 2.85, 0.94, 13.0, 0, 167e-12))\n (def Na (-&gt;atomInfo \&quot;Na\&quot;, 0.14, false, 6.817e9, 3.434e9, 371, 0.00026, 2.7, 0.55, 23.8, 0, 190e-12))\n (def Ga (-&gt;atomInfo \&quot;Ga\&quot;, 0.07, false, 56.9e9, 37.47e9, 302.9, 0.0011, 4.1, 2.25, 11.8, 1.9, 136e-12))\n (def In (-&gt;atomInfo \&quot;In\&quot;, 0.07, false, 41.09e9, 3.728e9, 429.7, 0.000675, 3.9, 1.6, 15.7, 1.9, 156e-12))\n (def Tl (-&gt;atomInfo \&quot;Tl\&quot;, 0.07, false, 35.93e9, 2.747e9, 577, 0.000575, 3.9, 1.4, 17.2, 1.9, 156e-12))\n (def Sn (-&gt;atomInfo \&quot;Sn\&quot;, 0.04, false, 110.9e9, 18.44e9, 505.06, 0.000675, 4.15, 1.9, 16.3, 2.1, 145e-12))\n (def Pb (-&gt;atomInfo \&quot;Pb\&quot;, 0.04, false, 42.99e9, 5.396e9, 600.6, 0.0006, 4.1, 1.52, 18.3, 2.1, 154e-12))\n (def Sb (-&gt;atomInfo \&quot;Sb\&quot;, 0.04, false, 38.29e9, 20.01e9, 904, 0.000535, 4.4, 2, 16.9, 2.3, 133e-12))\n (def Bi (-&gt;atomInfo \&quot;Bi\&quot;, 0.04, false, 31.48e9, 12.85e9, 544.52, 0.00049, 4.15, 1.56, 19.3, 2.3, 143e-12))\n (def Pd (-&gt;atomInfo \&quot;Pd\&quot;, 0.04, true, 180.9e9, 51.11e9, 1825, 0.00205, 5.45, 4.66, 8.9, 1.0, 169e-12))\n (def Au (-&gt;atomInfo \&quot;Au\&quot;, 0.07, true, 173.2e9, 27.57e9, 137.58, 0.0015, 5.15, 3.87, 10.2, 0.3, 174e-12))\n (def Mn (-&gt;atomInfo \&quot;Mn\&quot;, 0.04, true, 59.67e9, 76.52e9, 1517, 0.0016, 4.45, 4.17, 7.3, 1.0, 161e-12))\n (def Zr (-&gt;atomInfo \&quot;Zr\&quot;, 0.04, true, 83.335e9, 34.14e9, 2125, 0.002, 3.45, 2.8, 14.0, 1.0, 206e-12))\n (def Nb (-&gt;atomInfo \&quot;Nb\&quot;, 0.04, true, 170.3e9, 37.47e9, 2740, 0.0027, 4.05, 4.41, 10.8, 1.0, 198e-12))\n (def Tc (-&gt;atomInfo \&quot;Tc\&quot;, 0.04, true, 297.2e9, 142.2e9, 2473, 0.00315, 5.3, 5.93, 8.6, 1.0, 183e-12))\n (def Ta (-&gt;atomInfo \&quot;Ta\&quot;, 0.04, true, 200.1e9, 28.67e9, 3287, 0.003150, 4.05, 4.33, 10.8, 1.0, 200e-12))\n (def W (-&gt;atomInfo \&quot;W\&quot;, 0.04, true, 323.3e9, 153e9, 3680, 0.003675, 4.8, 5.93, 9.5, 1.0, 193e-12))\n (def Pt (-&gt;atomInfo \&quot;Pt\&quot;, 0.04, true, 278.4e9, 61.02e9, 2045, 0.002475, 5.65, 5.64, 9.1, 1.0, 177e-12))\n (def La (-&gt;atomInfo \&quot;La\&quot;, 0.07, true, 24.3e9, 14.91e9, 1193, 0.001020, 3.17, 1.64, 22.5, 0.7, 226e-12))\n (def Re (-&gt;atomInfo \&quot;Re\&quot;, 0.04, true, 371.8e9, 178.5e9, 3453, 0.0036, 5.2, 6.33, 8.8, 1.0, 188e-12))\n (def Rh (-&gt;atomInfo \&quot;Rh\&quot;, 0.04, true, 270.6e9, 147.2e9, 2236, 0.0027, 5.4, 5.45, 8.3, 1.0, 173e-12))\n (def Ru (-&gt;atomInfo \&quot;Ru\&quot;, 0.04, true, 320.9e9, 159.9e9, 2523, 0.00305, 5.4, 6.13, 8.2, 1.0, 178e-12))\n (def Gd (-&gt;atomInfo \&quot;Gd\&quot;, 0.07, true, 38.34e9, 22.27e9, 1585, 0.00111, 3.2, 1.77, 19.9, 0.7, 233e-12))\n (def Ca (-&gt;atomInfo \&quot;Ca\&quot;, 0.1, false, 15.21e9, 7.358e9, 1112, 0.00049, 2.55, 0.75, 26.2, 0.4, 194e-12))\n (def B (-&gt;atomInfo \&quot;B\&quot;, 0.07, false, 178.5e9, 203.1e9, 2300, 0.00305, 5.30, 5.36, 4.7, 1.9, 87e-12))\n (def Cd (-&gt;atomInfo \&quot;Cd\&quot;, 0.1, false, 46.75e9, 24.13e9, 594.18, 0.00074, 4.05, 1.91, 13.0, 1.4, 161e-12))\n \n \n (defn PQR [atoma atomb] (cond\n                           (and (:transition atoma) (:transition atomb)) {:P 14.1, :Q 132.54, :R 0}\n                           (not (or (:transition atoma) (:transition atomb))) {:P 10.6, :Q 99.64, :R 0}\n                           (and (or (:transition atoma) (:transition atomb)) (not (and (:transition atoma) (:transition atomb)))) {:P 12.3, :Q 115.62, :R (* 12.3 (:R atoma) (:R atomb))}\n                           ))\n (defn heatOfSolution [solute solvent]\n   (* 2\n      (/ (Math/pow (:vm solute) (/ 2.0 3.0))\n         (+ (Math/pow (:nws solute) (/ -1.0 3.0))\n            (Math/pow (:nws solvent) (/ -1.0 3.0))))\n      (let [pqr (PQR solute solvent)]\n        (+ (* -1 (:P pqr) (Math/pow (- (:phi solute) (:phi solvent)) 2))\n           (* (:Q pqr) (Math/pow (- (Math/pow (:nws solute) (/ 1.0 3.0)) (Math/pow (:nws solvent) (/ 1.0 3.0))) 2))\n           (* -1 (:R pqr))\n           ))\n      ))\n \n \n (defn valloy [ca solute solvent] (nth (take 25 (iterate (fn [[va vb]]\n                                                           (let [cas1 (* ca (Math/pow va (/ 2.0 3.0)) (/ 1.0 (+ (* ca (Math/pow va (/ 2.0 3.0))) (* (- 1 ca) (Math/pow vb (/ 2.0 3.0))))))\n                                                                 cbs1 (- 1 cas1)\n                                                                 va1 (Math/pow (* (Math/pow (:vm solute) (/ 2.0 3.0)) (+ 1 (* (:a solute) (* cbs1 (+ 1 (* 8 cas1 cas1 cbs1 cbs1))) (- (:phi solute) (:phi solvent))))) (/ 3.0 2.0))\n                                                                 vb1 (Math/pow (* (Math/pow (:vm solvent) (/ 2.0 3.0)) (+ 1 (* (:a solvent) (* cas1 (+ 1 (* 8 cas1 cas1 cbs1 cbs1))) (- (:phi solvent) (:phi solute))))) (/ 3.0 2.0))\n                                                                 ]\n                                                             [va1 vb1]\n                                                             )) (let [cas (* ca (Math/pow (:vm solute) (/ 2.0 3.0)) (/ 1.0 (+ (* ca (Math/pow (:vm solute) (/ 2.0 3.0))) (* (- 1 ca) (Math/pow (:vm solvent) (/ 2.0 3.0))))))\n                                                                      cbs (- 1 cas)\n                                                                      ]\n                                                                  [(Math/pow (* (Math/pow (:vm solute) (/ 2.0 3.0)) (+ 1 (* (:a solute) (* cbs (+ 1 (* 8 cas cas cbs cbs))) (- (:phi solute) (:phi solvent))))) (/ 3.0 2.0))\n                                                                   (Math/pow (* (Math/pow (:vm solvent) (/ 2.0 3.0)) (+ 1 (* (:a solvent) cas (+ 1 (* 8 cas cas cbs cbs)) (- (:phi solvent) (:phi solute))))) (/ 3.0 2.0))\n                                                                   ])\n                                                         )) 19))\n ;;test\n ;;(valloy 0.5 Cu Zn)\n ;;(valloy 0.5 Zn Cu)\n \n \n \n (defn formationEnthalpy [ca solute solvent]                 ;;ca is the concentration of solute\n   (let [va (first (valloy ca solute solvent))\n         vb (second (valloy ca solute solvent))\n         cas (* ca (Math/pow va (/ 2.0 3.0)) (/ 1.0 (+ (* ca (Math/pow va (/ 2.0 3.0))) (* (- 1 ca) (Math/pow vb (/ 2.0 3.0))))))\n         cbs (- 1 cas)\n         fc (* cbs (+ 1 (* 8 cas cas cbs cbs)))\n         ;vb (Math/pow (* (Math/pow (:vm solvent) (/ 2.0 3.0)) (+ 1 (* (:a solvent) cas (+ 1 (* 8 cas cas cbs cbs)) (- (:phi solvent) (:phi solute))))) (/ 3.0 2.0))\n         pqr (PQR solute solvent)\n         ]\n     (* 2 fc ca\n        (/ (Math/pow va (/ 2.0 3.0))\n           (+ (Math/pow (:nws solute) (/ -1.0 3.0))\n              (Math/pow (:nws solvent) (/ -1.0 3.0))))\n        (+ (* -1 (:P pqr) (Math/pow (- (:phi solute) (:phi solvent)) 2))\n           (* (:Q pqr) (Math/pow (- (Math/pow (:nws solute) (/ 1.0 3.0)) (Math/pow (:nws solvent) (/ 1.0 3.0))) 2))\n           (* -1 (:R pqr))\n           )\n        )))\n \n (defn Eshelby [solute solvent]\n   (-&gt; 24 (* pi\n             (:bulkmodulus solvent)\n             (:shearmodulus solute)\n             (:atomicradius solute)\n             (:atomicradius solvent)\n             (Math/pow (- (:atomicradius solute) (:atomicradius solvent)) 2.0))\n       (/ (+ (* 3 (:bulkmodulus solvent) (:atomicradius solvent)) (* 4 (:shearmodulus solute) (:atomicradius solute))))))\n \n (defn GBEnthalpy [solute solvent] (+\n                                     (-&gt; (Eshelby solute solvent) (* Nav) (/ 1000))\n                                     (* -0.71 (/ 1.0 3.0) (/ 1.0 2.0)\n                                        (- (* c0 (:surfaceenergy solute) (Math/pow (* (:vm solute) 1.0e-6) (/ 2.0 3.0)))\n                                           (* c0 (:surfaceenergy solvent) (Math/pow (* (:vm solvent) 1.0e-6) (/ 2.0 3.0)))\n                                           (heatOfSolution solute solvent)))))\n \n ;;Mclean Segregation law\n (defn McLean \n   \&quot;Mclean Segregation law, which determines the concentration of solute in the grain boundary. Return the concentration of solute in the grain boundary. Note that the segregation enthalpy should use positive values here.\&quot; \n   [temperature, Hseg, Xbulk] \n   {:pre [(&gt;= Xbulk 0) (&lt;= Xbulk 1) (&gt;= temperature 0) (&gt;= Hseg 0)]}\n   (-&gt;&gt; (-&gt; Xbulk (/ (- 1 Xbulk)) (* (Math/exp  (/ Hseg k temperature)))) (/ 1.0) (+ 1.0) (/ 1.0)))\n \n ;;Solve compositions in the grain interial and boundary\n (defn\n    McLeanComp \n    \&quot;Solve compositions in the grain interial and boundary. By the forumlae of (1) Mclean segregation law:Xig/(1-Xig)=Xb/(1-Xb)*exp(Hseg/kT) and (2) X=(1-fig)*Xb+fig*Xig. Where X is the global composition, Xb is the composition in the grain interial, Xig is the composition in the boundary, fig is the volume fraction of the boundary layer, which could be expressed as: fig=1-((d-t)/d)^D, where D is the dimensionality parameter. D=3 should be used for a general threedimensional polycrystal, while D=2 is useful for columnar or highly elongated grain structures and D=1 applies to lamellar or platelike grains.\&quot;\n    [globalComposition, grainSize, boundaryThickness, Dimensionality, temperature, Hseg] \n{:pre [(&gt;= globalComposition 0) (&lt;= globalComposition 1) (&lt; boundaryThickness grainSize) (&gt;= boundaryThickness 0)\n           (&gt;= Dimensionality 0) (&lt;= Dimensionality 3) (&gt;= temperature 0) (&gt;= Hseg 0)]}\n(let [X globalComposition,\n    d grainSize,\n    t boundaryThickness,\n    D Dimensionality,\n    T temperature,\n    H (* Hseg 1000.0) ;;since the unit of Hseg is kJ/mol, here we need J/mol\n    fig (- 1 (Math/pow (-&gt; d (- t) (/ d)) D))\n    ex (Math/exp (-&gt; -1 (* Hseg) (/ R T)))\n    a (* fig (- ex 1))\n    b (-&gt; 1 (- ex) (* fig) (+ (-&gt; 1 (- X) (* ex))) (+ X))\n    c (* -1.0 X)\n    Xig (-&gt; -1 (* b) (+ (Math/sqrt (-&gt; b (* b) (- (* 4.0 a c))))) (/ 2.0 a))\n    Xb (-&gt; X (- (* fig Xig)) (/ (- 1 fig)))] {:X X :Xig Xig :Xb Xb :fig fig}))\n \n (def temperature 273)\n\n;;unit:J/m^2\n (defn GBEnergy \&quot;Grain boundary segregation and thermodynamically stable binary nanocrystalline alloys, Jason R. Trelewicz and Christopher A. Schuh. PHYSICAL REVIEW B 79, 094112 (2009), http://dx.doi.org/10.1103/PhysRevB.79.094112  Eq. 25(b), note that the atomic volume is of the solvent\&quot;\n    [gA, boundaryThickness, Xig, atomicVolume, Hseg, temperature, Xb]\n   (-&gt; gA (- (-&gt; boundaryThickness (* Xig) (/ atomicVolume) (* (+ (/ (* Hseg 1000) Nav) (* k temperature (Math/log Xb))))))))\n\n;;test GBEnergy\n(comment \n(GBEnergy 0,0.5e-9,0.0100398,(-&gt; Math/PI (* 4.0) (/ 3.0) (* (Math/pow (:atomicradius Cu) 3.0))),10,300,0.0099999)\n(-&gt; Math/PI (* 4.0) (/ 3.0) (* (Math/pow (:atomicradius Cu) 3.0)))\n(McLeanComp 0.01 100.0e-6,0.5e-9,3.0,300,10)\n(map #(McLeanComp % 100.0e-6,0.5e-9,3.0,298,10) [0.01 0.02 0.03]))\n\n (defn GBEnergy1\n   \&quot;Equation (1) in H.A. Murdoch, C.A. Schuh, Estimation of grain boundary segregation enthalpy and its role in stable nanocrystalline alloy design, Journal of Materials Research. 28 (2013) 2154–2163. doi:10.1557/jmr.2013.211.\&quot;\n   [g0 soluteExcess segregationEnthalpy Temperature soluteContent]\n   (- g0 (* soluteExcess (- segregationEnthalpy (* k temperature (Math/log soluteContent))))))\n \n (def cwidth 888)\n (def cheight 666)\n \n (defn getChart [solute solvent]\n   (let [mychart (XYChart. cwidth cheight)\n         ;;sw (SwingWrapper. mychart)\n         xdata (take 201 (iterate #(+ % (/ 1.0 200.0)) 0))         \n         ydata (map #(formationEnthalpy % solute solvent) xdata)]\n     (.setTitle mychart (str \&quot;Miedema Formation Enthalpy \&quot; (:name solvent) \&quot;-\&quot; (:name solute)))\n     (.setXAxisTitle mychart (str (:name solute) \&quot;(at.%)\&quot;))\n     (.setYAxisTitle mychart \&quot;Formation Enthalpy (kJ/mol)\&quot;)\n     (.setLegendPosition (.getStyler mychart) Styler$LegendPosition/InsideSW)\n     (.addSeries mychart (str (:name solvent) \&quot;-\&quot; (:name solute)), xdata, ydata)\n     ;;(.displayChart sw)\n     (println (str \&quot;solvent-solute(\&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot;)\&quot;))\n     (println \&quot;Heat of solution(kJ/mol):\&quot;)\n     (println (str (:name solute) \&quot; in \&quot; (:name solvent) \&quot;:\&quot; (heatOfSolution solute solvent)))\n     (println (str (:name solvent) \&quot; in \&quot; (:name solute) \&quot;:\&quot; (heatOfSolution solvent solute)))\n     (println \&quot;Grain boundary segregation enthalpy(kJ/mol):\&quot;)\n     (println (GBEnthalpy solute solvent))\n     mychart\n     ))\n\n\n;; (GBEnergy gA, boundaryThickness, Xig, atomicVolume, Hseg, temperature, Xb)\n;; (McLeanComp globalComposition, grainSize, boundaryThickness, Dimensionality, temperature, Hseg)\n (defn getGBEChart [solute solvent]\n   (let [mychart (XYChart. cwidth cheight)\n         ;;sw (SwingWrapper. mychart)\n         xdata (take 201 (iterate #(+ % (/ 0.01 200.0)) 0))\n         hseg (GBEnthalpy solute solvent)\n         mcleancomp (map #(McLeanComp % 100.0e-6,0.5e-9,3.0,298,hseg) xdata)\n         xig (map #(:Xig %) mcleancomp)\n         xb  (map #(:Xb %) mcleancomp)\n         ydata (map #(GBEnergy 0 0.5e-9 %1 (-&gt; Math/PI (* 4.0) (/ 3.0) (* (Math/pow (:atomicradius solvent) 3.0))) hseg 298 %2) xig xb)];;todo,what is the grain boundary energy of an pure metal?? need solution\n     (.setTitle mychart (str \&quot;Grain boundary energy \&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot; @T=298 K,d=100 um\&quot;))\n     (.setXAxisTitle mychart (str (:name solute) \&quot;(at.%)\&quot;))\n     (.setYAxisTitle mychart \&quot;GB engergy(J/m2)\&quot;)\n     (.setLegendPosition (.getStyler mychart) Styler$LegendPosition/InsideSW)\n     (.addSeries mychart (str (:name solvent) \&quot;-\&quot; (:name solute)), xdata, ydata)\n     ;;(.displayChart sw)\n    ;; (println (str \&quot;solvent-solute(\&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot;)\&quot;))\n    ;; (println \&quot;Heat of solution(kJ/mol):\&quot;)\n    ;; (println (str (:name solute) \&quot; in \&quot; (:name solvent) \&quot;:\&quot; (heatOfSolution solute solvent)))\n    ;; (println (str (:name solvent) \&quot; in \&quot; (:name solute) \&quot;:\&quot; (heatOfSolution solvent solute)))\n    ;; (println \&quot;Grain boundary segregation enthalpy(kJ/mol):\&quot;)\n    ;; (println (GBEnthalpy solute solvent))\n     mychart\n     ))\n\n;;variation of grain boundary energy with grain size\n (defn getGBEvsSizeChart [solute solvent content]\n   (let [mychart (XYChart. cwidth cheight)\n         ;;sw (SwingWrapper. mychart)\n         xdata (range 1 300) ;;grain size unit: nm\n         hseg (GBEnthalpy solute solvent)\n         mcleancomp (map #(McLeanComp content (* % 1.0e-9),0.5e-9,3.0,298,hseg) xdata)\n         xig (map #(:Xig %) mcleancomp)\n         xb  (map #(:Xb %) mcleancomp)\n         ydata (map #(GBEnergy 0 0.5e-9 %1 (-&gt; Math/PI (* 4.0) (/ 3.0) (* (Math/pow (:atomicradius solvent) 3.0))) hseg 298 %2) xig xb)];;todo,what is the grain boundary energy of an pure metal?? need solution\n     (view xy-plot xdata,ydata\n           :legend true\n           :title \&quot;sample\&quot;\n           :x-label \&quot;Grain size(nm)\&quot;\n           :ylabel \&quot;GB energy(J/m^2)\&quot;)\n     (.setTitle mychart (str \&quot;Grain boundary energy \&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot; @T=298 K\&quot;))\n     (.setXAxisTitle mychart \&quot;Grain size(nm)\&quot;)\n     (.setYAxisTitle mychart \&quot;GB engergy(J/m^2)\&quot;)\n     (.setLegendPosition (.getStyler mychart) Styler$LegendPosition/InsideNE)\n     (.addSeries mychart (str (:name solvent) \&quot;(1-x)\&quot; (:name solute) \&quot;(x), x=\&quot; content), xdata, ydata)\n     ;;(.displayChart sw)\n    ;; (println (str \&quot;solvent-solute(\&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot;)\&quot;))\n    ;; (println \&quot;Heat of solution(kJ/mol):\&quot;)\n    ;; (println (str (:name solute) \&quot; in \&quot; (:name solvent) \&quot;:\&quot; (heatOfSolution solute solvent)))\n    ;; (println (str (:name solvent) \&quot; in \&quot; (:name solute) \&quot;:\&quot; (heatOfSolution solvent solute)))\n    ;; (println \&quot;Grain boundary segregation enthalpy(kJ/mol):\&quot;)\n    ;; (println (GBEnthalpy solute solvent))\n     mychart\n     ))&quot;, :offset 17979, :ns &quot;user&quot;} {:command &quot;(defn getGBEvsSizeChart [solute solvent content]\n   (let [mychart (XYChart. cwidth cheight)\n         ;;sw (SwingWrapper. mychart)\n         xdata (range 1 300) ;;grain size unit: nm\n         hseg (GBEnthalpy solute solvent)\n         mcleancomp (map #(McLeanComp content (* % 1.0e-9),0.5e-9,3.0,298,hseg) xdata)\n         xig (map #(:Xig %) mcleancomp)\n         xb  (map #(:Xb %) mcleancomp)\n         ydata (map #(GBEnergy 0 0.5e-9 %1 (-&gt; Math/PI (* 4.0) (/ 3.0) (* (Math/pow (:atomicradius solvent) 3.0))) hseg 298 %2) xig xb)];;todo,what is the grain boundary energy of an pure metal?? need solution\n     (view (xy-plot xdata,ydata\n           :legend true\n           :title \&quot;sample\&quot;\n           :x-label \&quot;Grain size(nm)\&quot;\n           :ylabel \&quot;GB energy(J/m^2)\&quot;))\n     (.setTitle mychart (str \&quot;Grain boundary energy \&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot; @T=298 K\&quot;))\n     (.setXAxisTitle mychart \&quot;Grain size(nm)\&quot;)\n     (.setYAxisTitle mychart \&quot;GB engergy(J/m^2)\&quot;)\n     (.setLegendPosition (.getStyler mychart) Styler$LegendPosition/InsideNE)\n     (.addSeries mychart (str (:name solvent) \&quot;(1-x)\&quot; (:name solute) \&quot;(x), x=\&quot; content), xdata, ydata)\n     ;;(.displayChart sw)\n    ;; (println (str \&quot;solvent-solute(\&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot;)\&quot;))\n    ;; (println \&quot;Heat of solution(kJ/mol):\&quot;)\n    ;; (println (str (:name solute) \&quot; in \&quot; (:name solvent) \&quot;:\&quot; (heatOfSolution solute solvent)))\n    ;; (println (str (:name solvent) \&quot; in \&quot; (:name solute) \&quot;:\&quot; (heatOfSolution solvent solute)))\n    ;; (println \&quot;Grain boundary segregation enthalpy(kJ/mol):\&quot;)\n    ;; (println (GBEnthalpy solute solvent))\n     mychart\n     ))&quot;, :offset 1614, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(use 'incanter.charts)&quot;, :offset 22, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(def myx (range 10))&quot;, :offset 20, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(def myy (range 10))&quot;, :offset 20, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(view (xy-plot myx myy))&quot;, :offset 24, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(defn getGBEvsSizeChart [solute solvent content]\n   (let [mychart (XYChart. cwidth cheight)\n         ;;sw (SwingWrapper. mychart)\n         xdata (range 1 300) ;;grain size unit: nm\n         hseg (GBEnthalpy solute solvent)\n         mcleancomp (map #(McLeanComp content (* % 1.0e-9),0.5e-9,3.0,298,hseg) xdata)\n         xig (map #(:Xig %) mcleancomp)\n         xb  (map #(:Xb %) mcleancomp)\n         ydata (map #(GBEnergy 0 0.5e-9 %1 (-&gt; Math/PI (* 4.0) (/ 3.0) (* (Math/pow (:atomicradius solvent) 3.0))) hseg 298 %2) xig xb)\n         jchart (xy-plot xdata,ydata\n                         :legend true\n                         :title \&quot;sample\&quot;\n                         :x-label \&quot;Grain size(nm)\&quot;\n                         :ylabel \&quot;GB energy(J/m^2)\&quot;)];;todo,what is the grain boundary energy of an pure metal?? need solution\n     \n     (.setTitle mychart (str \&quot;Grain boundary energy \&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot; @T=298 K\&quot;))\n     (.setXAxisTitle mychart \&quot;Grain size(nm)\&quot;)\n     (.setYAxisTitle mychart \&quot;GB engergy(J/m^2)\&quot;)\n     (.setLegendPosition (.getStyler mychart) Styler$LegendPosition/InsideNE)\n     (.addSeries mychart (str (:name solvent) \&quot;(1-x)\&quot; (:name solute) \&quot;(x), x=\&quot; content), xdata, ydata)\n     ;;(.displayChart sw)\n    ;; (println (str \&quot;solvent-solute(\&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot;)\&quot;))\n    ;; (println \&quot;Heat of solution(kJ/mol):\&quot;)\n    ;; (println (str (:name solute) \&quot; in \&quot; (:name solvent) \&quot;:\&quot; (heatOfSolution solute solvent)))\n    ;; (println (str (:name solvent) \&quot; in \&quot; (:name solute) \&quot;:\&quot; (heatOfSolution solvent solute)))\n    ;; (println \&quot;Grain boundary segregation enthalpy(kJ/mol):\&quot;)\n    ;; (println (GBEnthalpy solute solvent))\n     mychart\n     jchart\n     ))&quot;, :offset 1692, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(ns thermodynmetal.core\n  (:gen-class))\n(use 'thermodynmetal.miedema)\n(use 'seesaw.core)\n(use 'seesaw.mig)\n(use 'seesaw.table)\n(import '(org.knowm.xchart XChartPanel)\n        '(java.io File))\n(def atomSets [Ag Cu Zn Fe C Al Mg Ni N H Y Cr Sr Sc Ti V Mo Co Li Na Ga In Tl Sn Pb Sb Bi Pd Au Mn Zr Nb Tc Ta W Pt La Re Rh Ru Gd Ca B Cd])\n(def atoms {\&quot;Ag\&quot; Ag \&quot;Cu\&quot; Cu \&quot;Zn\&quot; Zn \&quot;Fe\&quot; Fe \&quot;C\&quot; C \&quot;Al\&quot; Al \&quot;Mg\&quot; Mg \&quot;Ni\&quot; Ni \&quot;N\&quot; N \&quot;H\&quot; H \&quot;Y\&quot; Y \&quot;Cr\&quot; Cr \&quot;Sr\&quot; Sr \&quot;Sc\&quot; Sc \&quot;Ti\&quot; Ti \&quot;V\&quot; V \&quot;Mo\&quot; Mo \&quot;Co\&quot; Co \&quot;Li\&quot; Li \&quot;Na\&quot; Na \&quot;Ga\&quot; Ga \&quot;In\&quot; In \&quot;Tl\&quot; Tl \&quot;Sn\&quot; Sn \&quot;Pb\&quot; Pb \&quot;Sb\&quot; Sb \&quot;Bi\&quot; Bi \&quot;Pd\&quot; Pd \&quot;Au\&quot; Au \&quot;Mn\&quot; Mn \&quot;Zr\&quot; Zr \&quot;Nb\&quot; Nb \&quot;Tc\&quot; Tc \&quot;Ta\&quot; Ta \&quot;W\&quot; W \&quot;Pt\&quot; Pt \&quot;La\&quot; La \&quot;Re\&quot; Re \&quot;Rh\&quot; Rh \&quot;Ru\&quot; Ru \&quot;Gd\&quot; Gd \&quot;Ca\&quot; Ca \&quot;B\&quot; B \&quot;Cd\&quot; Cd})\n;;(plot Zn Cu)\n(native!)\n(def myicon (icon (File. \&quot;ico.ico\&quot;)))\n(def f (frame :title \&quot;Miedema for binary\&quot;\n              :icon myicon\n              :width 888\n              :height 666))\n;;(-&gt; f pack! show!)\n;;(-&gt; f show!)\n(defn display [content]\n  (config! f :content content)\n  content)\n(def myframe (frame :title \&quot;Miedema Enthalpy\&quot;\n                    :icon myicon\n                    :width 888\n                    :height 666))\n;;(def mypanel (grid-panel :rows 3 :columns 3 ))\n(def soluteLabel (label \&quot;solute:\&quot;))\n(def solventLabel (label \&quot;solvent:\&quot;))\n(def soluteText (text \&quot;Zn\&quot;))\n(def solventText (text \&quot;Cu\&quot;))\n(def contentLabel (label \&quot;content:\&quot;))\n(def contentText (text \&quot;0.5\&quot;))\n(def enthalpyValue (label \&quot;\&quot;))\n(def enthalpyUnit (label \&quot; kJ/mol\&quot;))\n(def myButton (button :text \&quot;Formation Enthalpy\&quot;))\n(def GBEnergyBtn (button :text \&quot;GB Energy plot\&quot;))\n(def GBEvsSizeBtn (button :text \&quot;GB Energy vs grain size\&quot;))\n(def GBSTableB (button :text  \&quot;GB Hseg\&quot;))\n(def GBSTable (table :model [:columns [:elements :Ag :Cu :Zn :Fe :C :Al :Mg :Ni :N :H :Y :Cr :Sr :Sc :Ti :V :Mo :Co :Li :Na :Ga :In :Tl :Sn :Pb :Sb :Bi :Pd :Au :Mn :Zr :Nb :Tc :Ta :W :Pt :La :Re :Rh :Ru :Gd :Ca :B :Cd]\n                             :rows [{:elements \&quot;Ag\&quot;} {:elements \&quot;Cu\&quot;} {:elements \&quot;Zn\&quot;} {:elements \&quot;Fe\&quot;} {:elements \&quot;C\&quot;} {:elements \&quot;Al\&quot;} {:elements \&quot;Mg\&quot;} {:elements \&quot;Ni\&quot;} {:elements \&quot;N\&quot;} {:elements \&quot;H\&quot;} {:elements \&quot;Y\&quot;} {:elements \&quot;Cr\&quot;} {:elements \&quot;Sr\&quot;} {:elements \&quot;Sc\&quot;} {:elements \&quot;Ti\&quot;} {:elements \&quot;V\&quot;} {:elements \&quot;Mo\&quot;} {:elements \&quot;Co\&quot;} {:elements \&quot;Li\&quot;} {:elements \&quot;Na\&quot;} {:elements \&quot;Ga\&quot;} {:elements \&quot;In\&quot;} {:elements \&quot;Tl\&quot;} {:elements \&quot;Sn\&quot;} {:elements \&quot;Pb\&quot;} {:elements \&quot;Sb\&quot;} {:elements \&quot;Bi\&quot;} {:elements \&quot;Pd\&quot;} {:elements \&quot;Au\&quot;} {:elements \&quot;Mn\&quot;} {:elements \&quot;Zr\&quot;} {:elements \&quot;Nb\&quot;} {:elements \&quot;Tc\&quot;} {:elements \&quot;Ta\&quot;} {:elements \&quot;W\&quot;} {:elements \&quot;Pt\&quot;} {:elements \&quot;La\&quot;} {:elements \&quot;Re\&quot;} {:elements \&quot;Rh\&quot;} {:elements \&quot;Ru\&quot;} {:elements \&quot;Gd\&quot;} {:elements \&quot;Ca\&quot;} {:elements \&quot;B\&quot;} {:elements \&quot;Cd\&quot;}]]))\n(def logs (text :multi-line? true :rows 30 :text \&quot;Results are shown here\&quot;))\n(def myPanel (mig-panel\n               :constraints [\&quot;\&quot; \&quot;[shrink 0]20px[200, grow, fill]\&quot; \&quot;[shrink 0]5px[grow]\&quot;]\n               :items [[soluteLabel]\n                       [soluteText]\n                       [solventLabel]\n                       [solventText]\n                       [contentLabel]\n                       [contentText]                       \n                       [enthalpyValue]\n                       [enthalpyUnit \&quot;wrap\&quot;]\n                       [myButton]\n                       [GBEnergyBtn]\n                       [GBEvsSizeBtn]\n                       [GBSTableB]\n                       [(scrollable logs) \&quot;cell 1 2 7 30\&quot;]]))\n(display myPanel)\n;;(config! myframe :content (XChartPanel. (getChart Zn Cu)))\n(listen myButton :action (fn [e]\n                           (let [solute (atoms (text soluteText)) solvent (atoms (text solventText))]\n                             (config! myframe :content (XChartPanel. (getChart solute solvent)))\n                             (text! logs (str (text logs) \&quot;\\nsolvent-solute(\&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot;)\\n\&quot;\n                                              \&quot;Heat of solution(kJ/mol):\\n\&quot;\n                                              (str (:name solute) \&quot; in \&quot; (:name solvent) \&quot;:\&quot; (format \&quot;%.2f\&quot; (heatOfSolution solute solvent)) \&quot;\\n\&quot;)\n                                              (str (:name solvent) \&quot; in \&quot; (:name solute) \&quot;:\&quot; (format \&quot;%.2f\&quot; (heatOfSolution solvent solute)) \&quot;\\n\&quot;)\n                                              \&quot;Grain boundary segregation enthalpy(kJ/mol):\\n\&quot;\n                                              (str (:name solute) \&quot; in \&quot; (:name solvent) (format \&quot;: %.2f\&quot; (GBEnthalpy solute solvent)))))                             ;;(config! f :visible? false)\n                             (config! enthalpyValue :text (format \&quot;%.2f\&quot; (formationEnthalpy (read-string (second (re-matches (re-pattern \&quot;(\\\\d+\\\\.{0,1}\\\\d+).*\&quot;) (text contentText)))) solute solvent)))\n                           ;;(config! f :visible? true)\n                             (config! myframe :visible? true))))\n\n(listen GBEnergyBtn :action (fn [e]\n                              (let [solute (atoms (text soluteText)) solvent (atoms (text solventText))]\n                                (config! myframe :content (XChartPanel. (getGBEChart solute solvent)))\n                                (config! myframe :visible? true))))\n\n(listen GBEvsSizeBtn :action(fn [e]\n                              (let [solute (atoms (text soluteText)) solvent (atoms (text solventText))]\n                              (config! myframe :content (XChartPanel. (getGBEvsSizeChart solute solvent 1.0e-3)))\n                              (config! myframe :visible? true) )))\n\n(listen GBSTableB :action (fn [e]\n                            (do\n                              (doseq [rowid (range 44)]\n                                (let [a (nth atomSets rowid)]\n                                (update-at! GBSTable rowid [(:name a) (format \&quot;%.1f\&quot; (GBEnthalpy Ag a)) (format \&quot;%.1f\&quot; (GBEnthalpy Cu a)) (format \&quot;%.1f\&quot; (GBEnthalpy Zn a)) (format \&quot;%.1f\&quot; (GBEnthalpy Fe a)) (format \&quot;%.1f\&quot; (GBEnthalpy C a)) (format \&quot;%.1f\&quot; (GBEnthalpy Al a)) (format \&quot;%.1f\&quot; (GBEnthalpy Mg a)) (format \&quot;%.1f\&quot; (GBEnthalpy Ni a)) (format \&quot;%.1f\&quot; (GBEnthalpy N a)) (format \&quot;%.1f\&quot; (GBEnthalpy H a)) (format \&quot;%.1f\&quot; (GBEnthalpy Y a)) (format \&quot;%.1f\&quot; (GBEnthalpy Cr a)) (format \&quot;%.1f\&quot; (GBEnthalpy Sr a)) (format \&quot;%.1f\&quot; (GBEnthalpy Sc a)) (format \&quot;%.1f\&quot; (GBEnthalpy Ti a)) (format \&quot;%.1f\&quot; (GBEnthalpy V a)) (format \&quot;%.1f\&quot; (GBEnthalpy Mo a)) (format \&quot;%.1f\&quot; (GBEnthalpy Co a)) (format \&quot;%.1f\&quot; (GBEnthalpy Li a)) (format \&quot;%.1f\&quot; (GBEnthalpy Na a)) (format \&quot;%.1f\&quot; (GBEnthalpy Ga a)) (format \&quot;%.1f\&quot; (GBEnthalpy In a)) (format \&quot;%.1f\&quot; (GBEnthalpy Tl a)) (format \&quot;%.1f\&quot; (GBEnthalpy Sn a)) (format \&quot;%.1f\&quot; (GBEnthalpy Pb a)) (format \&quot;%.1f\&quot; (GBEnthalpy Sb a)) (format \&quot;%.1f\&quot; (GBEnthalpy Bi a)) (format \&quot;%.1f\&quot; (GBEnthalpy Pd a)) (format \&quot;%.1f\&quot; (GBEnthalpy Au a)) (format \&quot;%.1f\&quot; (GBEnthalpy Mn a)) (format \&quot;%.1f\&quot; (GBEnthalpy Zr a)) (format \&quot;%.1f\&quot; (GBEnthalpy Nb a)) (format \&quot;%.1f\&quot; (GBEnthalpy Tc a)) (format \&quot;%.1f\&quot; (GBEnthalpy Ta a)) (format \&quot;%.1f\&quot; (GBEnthalpy W a)) (format \&quot;%.1f\&quot; (GBEnthalpy Pt a)) (format \&quot;%.1f\&quot; (GBEnthalpy La a)) (format \&quot;%.1f\&quot; (GBEnthalpy Re a)) (format \&quot;%.1f\&quot; (GBEnthalpy Rh a)) (format \&quot;%.1f\&quot; (GBEnthalpy Ru a)) (format \&quot;%.1f\&quot; (GBEnthalpy Gd a)) (format \&quot;%.1f\&quot; (GBEnthalpy Ca a)) (format \&quot;%.1f\&quot; (GBEnthalpy B a)) (format \&quot;%.1f\&quot; (GBEnthalpy Cd a))])))\n                           (config! myframe :content (scrollable GBSTable))\n                            (config! myframe :visible? true))))\n;;(config! myframe :visible? true)\n;;(text logs)\n;;(doseq [a atomSets] (map #((format \&quot;%.1f\&quot; (GBEnthalpy Ag a)))))\n;;(dorun (map #(update-at! GBSTable % {:Ag (format \&quot;%.1f\&quot; (GBEnthalpy Ag Au))}) (range 3)))\n;;(-&gt; f show!)\n(defn -main\n  \&quot;I don't do a whole lot ... yet.\&quot;\n  [&amp; args]\n  (-&gt; f show!))&quot;, :offset 7597, :ns &quot;user&quot;} {:command &quot;(listen GBEvsSizeBtn :action(fn [e]\n                              (let [solute (atoms (text soluteText)) solvent (atoms (text solventText))]\n                              ;;(config! myframe :content (XChartPanel. (getGBEvsSizeChart solute solvent 1.0e-3)))\n                              (config! myframe :content (getGBEvsSizeChart solute solvent 1.0e-3))\n                              (config! myframe :visible? true) )))&quot;, :offset 422, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(use '(incanter charts))&quot;, :offset 24, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(use '(incanter core charts))&quot;, :offset 29, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(use '(incanter charts core))&quot;, :offset 29, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(defn getGBEvsSizeChart [solute solvent content]\n   (let [mychart (XYChart. cwidth cheight)\n         ;;sw (SwingWrapper. mychart)\n         xdata (range 1 300) ;;grain size unit: nm\n         hseg (GBEnthalpy solute solvent)\n         mcleancomp (map #(McLeanComp content (* % 1.0e-9),0.5e-9,3.0,298,hseg) xdata)\n         xig (map #(:Xig %) mcleancomp)\n         xb  (map #(:Xb %) mcleancomp)\n         ydata (map #(GBEnergy 0 0.5e-9 %1 (-&gt; Math/PI (* 4.0) (/ 3.0) (* (Math/pow (:atomicradius solvent) 3.0))) hseg 298 %2) xig xb)\n         jchart (xy-plot xdata,ydata\n                         :legend true\n                         :title \&quot;sample\&quot;\n                         :x-label \&quot;Grain size(nm)\&quot;\n                         :ylabel \&quot;GB energy(J/m^2)\&quot;)];;todo,what is the grain boundary energy of an pure metal?? need solution\n\n     (.setTitle mychart (str \&quot;Grain boundary energy \&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot; @T=298 K\&quot;))\n     (.setXAxisTitle mychart \&quot;Grain size(nm)\&quot;)\n     (.setYAxisTitle mychart \&quot;GB engergy(J/m^2)\&quot;)\n     (.setLegendPosition (.getStyler mychart) Styler$LegendPosition/InsideNE)\n     (.addSeries mychart (str (:name solvent) \&quot;(1-x)\&quot; (:name solute) \&quot;(x), x=\&quot; content), xdata, ydata)\n     ;;(.displayChart sw)\n    ;; (println (str \&quot;solvent-solute(\&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot;)\&quot;))\n    ;; (println \&quot;Heat of solution(kJ/mol):\&quot;)\n    ;; (println (str (:name solute) \&quot; in \&quot; (:name solvent) \&quot;:\&quot; (heatOfSolution solute solvent)))\n    ;; (println (str (:name solvent) \&quot; in \&quot; (:name solute) \&quot;:\&quot; (heatOfSolution solvent solute)))\n    ;; (println \&quot;Grain boundary segregation enthalpy(kJ/mol):\&quot;)\n    ;; (println (GBEnthalpy solute solvent))\n     mychart\n     (view jchart)\n     ))&quot;, :offset 1694, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(listen GBEvsSizeBtn :action(fn [e]\n                              (let [solute (atoms (text soluteText)) solvent (atoms (text solventText))]\n                              ;;(config! myframe :content (XChartPanel. (getGBEvsSizeChart solute solvent 1.0e-3)))\n                              (getGBEvsSizeChart solute solvent 1.0e-3)\n                              (config! myframe :visible? true) )))&quot;, :offset 395, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(defn getGBEvsSizeChart [solute solvent content]\n   (let [mychart (XYChart. cwidth cheight)\n         ;;sw (SwingWrapper. mychart)\n         xdata (range 1 300) ;;grain size unit: nm\n         hseg (GBEnthalpy solute solvent)\n         mcleancomp (map #(McLeanComp content (* % 1.0e-9),0.5e-9,3.0,298,hseg) xdata)\n         xig (map #(:Xig %) mcleancomp)\n         xb  (map #(:Xb %) mcleancomp)\n         ydata (map #(GBEnergy 0 0.5e-9 %1 (-&gt; Math/PI (* 4.0) (/ 3.0) (* (Math/pow (:atomicradius solvent) 3.0))) hseg 298 %2) xig xb)];;todo,what is the grain boundary energy of an pure metal?? need solution\n\n     (.setTitle mychart (str \&quot;Grain boundary energy \&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot; @T=298 K\&quot;))\n     (.setXAxisTitle mychart \&quot;Grain size(nm)\&quot;)\n     (.setYAxisTitle mychart \&quot;GB engergy(J/m^2)\&quot;)\n     (.setLegendPosition (.getStyler mychart) Styler$LegendPosition/InsideNE)\n     (.addSeries mychart (str (:name solvent) \&quot;(1-x)\&quot; (:name solute) \&quot;(x), x=\&quot; content), xdata, ydata)\n     ;;(.displayChart sw)\n    ;; (println (str \&quot;solvent-solute(\&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot;)\&quot;))\n    ;; (println \&quot;Heat of solution(kJ/mol):\&quot;)\n    ;; (println (str (:name solute) \&quot; in \&quot; (:name solvent) \&quot;:\&quot; (heatOfSolution solute solvent)))\n    ;; (println (str (:name solvent) \&quot; in \&quot; (:name solute) \&quot;:\&quot; (heatOfSolution solvent solute)))\n    ;; (println \&quot;Grain boundary segregation enthalpy(kJ/mol):\&quot;)\n    ;; (println (GBEnthalpy solute solvent))\n     mychart\n     ))&quot;, :offset 1455, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(listen GBEvsSizeBtn :action(fn [e]\n                              (let [solute (atoms (text soluteText)) solvent (atoms (text solventText))]\n                              (config! myframe :content (XChartPanel. (getGBEvsSizeChart solute solvent 1.0e-3)))\n                              (config! myframe :visible? true) )))&quot;, :offset 321, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(ns org.shender.clojure-gnuplot\n  \&quot;Interface to gnuplot.\&quot;\n  (:import [java.io OutputStreamWriter BufferedWriter]))&quot;, :offset 114, :ns &quot;user&quot;} {:command &quot;(defmulti transform-expr\n  \&quot;Transform arbitrary s-expr to string representation of corresponding infix\n  expression.\&quot;\n  type)&quot;, :offset 125, :ns &quot;org.shender.clojure-gnuplot&quot;} {:command &quot;(defmulti transform-funcall\n  \&quot;Transform s-expr, representing function call, to string representation of\n  corresponding infix expression.\&quot;\n  first)&quot;, :offset 148, :ns &quot;org.shender.clojure-gnuplot&quot;} {:command &quot;(defmethod transform-expr :default [x] (str x))&quot;, :offset 47, :ns &quot;org.shender.clojure-gnuplot&quot;} {:command &quot;(defmethod transform-expr String [x] (format \&quot;\\\&quot;%s\\\&quot;\&quot; x))&quot;, :offset 57, :ns &quot;org.shender.clojure-gnuplot&quot;} {:command &quot;(defmethod transform-expr clojure.lang.PersistentList [x]\n  (transform-funcall x))&quot;, :offset 82, :ns &quot;org.shender.clojure-gnuplot&quot;} {:command &quot;(def *bin-ops* [['+ 0] ['- 0] ['* 1] ['/ 1]])&quot;, :offset 45, :ns &quot;org.shender.clojure-gnuplot&quot;} {:command &quot;(defn transform-func\n  \&quot;Transformation of function call.\&quot;\n  [func args]\n  (let [args (map transform-expr args)]\n    (format \&quot;%s(%s)\&quot; func (apply str (interpose \&quot;, \&quot; args)))))&quot;, :offset 174, :ns &quot;org.shender.clojure-gnuplot&quot;} {:command &quot;(defn transform-bin-op\n  \&quot;Transformation of binary operation.\&quot;\n  [op id args]\n  (let [args (map transform-expr args)]\n    (if (= 1 (count args))\n      (transform-bin-op op id (cons id args))\n      (format \&quot;(%s)\&quot; (apply str (interpose op args))))))&quot;, :offset 247, :ns &quot;org.shender.clojure-gnuplot&quot;} {:command &quot;(defmethod transform-funcall :default [[func &amp; args]]\n  (transform-func func args))&quot;, :offset 83, :ns &quot;org.shender.clojure-gnuplot&quot;} {:command &quot;(defmethod transform-funcall 'range [[range a b]]\n  (format \&quot;[%s:%s]\&quot; a b))&quot;, :offset 75, :ns &quot;org.shender.clojure-gnuplot&quot;} {:command &quot;(defmethod transform-funcall 'enum [[enum a b]]\n  (format \&quot;%s, %s\&quot; a b))&quot;, :offset 72, :ns &quot;org.shender.clojure-gnuplot&quot;} {:command &quot;(doseq [[op id] *bin-ops*]\n  (defmethod transform-funcall op [[op &amp; args]]\n    (transform-bin-op op id args)))&quot;, :offset 110, :ns &quot;org.shender.clojure-gnuplot&quot;} {:command &quot;(defn transform-cmd\n  \&quot;Transform s-expr, representing gnuplot command, to gnuplot command.\&quot;\n  [cmd]\n  (let [cmd (map transform-expr cmd)]\n    (apply str (interpose \&quot; \&quot; cmd))))&quot;, :offset 175, :ns &quot;org.shender.clojure-gnuplot&quot;} {:command &quot;(defn start\n  \&quot;Start gnuplot process.\&quot;\n  []\n  (let [proc (.exec (Runtime/getRuntime) \&quot;gnuplot\&quot;)\n        out  (-&gt; (.getOutputStream proc) OutputStreamWriter. BufferedWriter.)]\n    {:proc proc :out out}))&quot;, :offset 202, :ns &quot;org.shender.clojure-gnuplot&quot;} {:command &quot;(defn stop\n  \&quot;Stop gnuplot process.\&quot;\n  [gnuplot]\n  (.destroy (:proc gnuplot)))&quot;, :offset 78, :ns &quot;org.shender.clojure-gnuplot&quot;} {:command &quot;(defn send-command\n  \&quot;Send command to gnuplot process.\&quot;\n  [gnuplot cmd]\n  (let [out (:out gnuplot)]\n    (.write out (str cmd \\newline))\n    (.flush out)))&quot;, :offset 154, :ns &quot;org.shender.clojure-gnuplot&quot;} {:command &quot;(defmacro exec\n  \&quot;Execute gnuplot commands.\&quot;\n  [gnuplot &amp; cmds]\n  `(doseq [cmd# '~cmds]\n     (send-command ~gnuplot (transform-cmd cmd#))))&quot;, :offset 139, :ns &quot;org.shender.clojure-gnuplot&quot;} {:command &quot;(require '[org.shender.clojure-gnuplot :as gnuplot])&quot;, :offset 52, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(gnuplot/exec gp\n              (unset key)\n              (set xrange (range 0 2))\n              (set yrange (range 2 5))\n              (set isosamples (enum 30 30))\n              (splot (sin (* x y)) with pm3d))&quot;, :offset 211, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(gnuplot/stop gp)&quot;, :offset 17, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(def gp (gnuplot/start))&quot;, :offset 24, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(gnuplot/exec gp\n              (unset key)\n              (set term wxt)\n              (set xrange (range 0 2))\n              (set yrange (range 2 5))\n              (set isosamples (enum 30 30))\n              (splot (sin (* x y)) with pm3d))&quot;, :offset 240, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(gnuplot/exec gp\n              (unset key)\n              (set term qt)\n              (set xrange (range 0 2))\n              (set yrange (range 2 5))\n              (set isosamples (enum 30 30))\n              (splot (sin (* x y)) with pm3d))&quot;, :offset 239, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(gnuplot/exec gp\n              (unset key)\n              (set term qt)\n              (plot (sin x) w l lw 3))&quot;, :offset 109, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(gnuplot/exec gp\n              (unset key)\n              (set term qt)\n              (set xrange (range 0 10))\n              (plot (sin x) w l lw 3 t \&quot;sin(x)\&quot;))&quot;, :offset 160, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(gnuplot/exec gp\n              (unset key)\n              (set term qt)\n              (set xrange (range 0 10))\n              (set key)\n              (plot (sin x) w l lw 3 t \&quot;sin(x)\&quot;))&quot;, :offset 184, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(defn getGBEvsSizeChart [solute solvent content]\n   {:pre [(&lt;= content 0.01)]}\n   (let [mychart (XYChart. cwidth cheight)\n         ;;sw (SwingWrapper. mychart)\n         xdata (range 1 300) ;;grain size unit: nm\n         hseg (GBEnthalpy solute solvent)\n         mcleancomp (map #(McLeanComp content (* % 1.0e-9),0.5e-9,3.0,298,hseg) xdata)\n         xig (map #(:Xig %) mcleancomp)\n         xb  (map #(:Xb %) mcleancomp)\n         ydata (map #(GBEnergy 0 0.5e-9 %1 (-&gt; Math/PI (* 4.0) (/ 3.0) (* (Math/pow (:atomicradius solvent) 3.0))) hseg 298 %2) xig xb)];;todo,what is the grain boundary energy of an pure metal?? need solution\n\n     (.setTitle mychart (str \&quot;Grain boundary energy \&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot; @T=298 K\&quot;))\n     (.setXAxisTitle mychart \&quot;Grain size(nm)\&quot;)\n     (.setYAxisTitle mychart \&quot;GB engergy(J/m^2)\&quot;)\n     (.setLegendPosition (.getStyler mychart) Styler$LegendPosition/InsideNE)\n     (.addSeries mychart (str (:name solvent) \&quot;(1-x)\&quot; (:name solute) \&quot;(x), x=\&quot; content), xdata, ydata)\n     ;;(.displayChart sw)\n    ;; (println (str \&quot;solvent-solute(\&quot; (:name solvent) \&quot;-\&quot; (:name solute) \&quot;)\&quot;))\n    ;; (println \&quot;Heat of solution(kJ/mol):\&quot;)\n    ;; (println (str (:name solute) \&quot; in \&quot; (:name solvent) \&quot;:\&quot; (heatOfSolution solute solvent)))\n    ;; (println (str (:name solvent) \&quot; in \&quot; (:name solute) \&quot;:\&quot; (heatOfSolution solvent solute)))\n    ;; (println \&quot;Grain boundary segregation enthalpy(kJ/mol):\&quot;)\n    ;; (println (GBEnthalpy solute solvent))\n     mychart\n     ))&quot;, :offset 1485, :ns &quot;thermodynmetal.miedema&quot;} {:command &quot;(listen GBEvsSizeBtn :action(fn [e]\n                              (let [solute (atoms (text soluteText)) solvent (atoms (text solventText))]\n                              (config! myframe :content (XChartPanel. (getGBEvsSizeChart solute solvent 0.001)))\n                              (config! myframe :visible? true) )))&quot;, :offset 320, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(listen GBEnergyBtn :action (fn [e]\n                              (let [solute (atoms (text soluteText)) solvent (atoms (text solventText))]\n                                (config! myframe :content (XChartPanel. (getGBEChart solute solvent)))\n                                (config! myframe :visible? true))))&quot;, :offset 311, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(listen GBEvsSizeBtn :action(fn [e]\n                              (let [solute (atoms (text soluteText)) solvent (atoms (text solventText))]\n                              (config! myframe :content (XChartPanel. (getGBEvsSizeChart solute solvent 0.002)))\n                              (config! myframe :visible? true) )))&quot;, :offset 320, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(-&gt; f show!)&quot;, :offset 12, :ns &quot;thermodynmetal.core&quot;} {:command &quot;(listen GBEvsSizeBtn :action(fn [e]\n                              (let [solute (atoms (text soluteText)) solvent (atoms (text solventText))]\n                              (config! myframe :content (XChartPanel. (getGBEvsSizeChart solute solvent (read-string (second (re-matches (re-pattern \&quot;(\\\\d+\\\\.{0,1}\\\\d+).*\&quot;) (text contentText)))))))\n                              (config! myframe :visible? true) )))&quot;, :offset 405, :ns &quot;thermodynmetal.core&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration default="true" type="ClojureREPL" factoryName="Local">
      <setting name="replType" value="0" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <method v="2" />
    </configuration>
    <configuration name="miedema" type="ClojureREPL" factoryName="Local">
      <module name="thermodynmetal" />
      <setting name="replType" value="0" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureScriptRunConfiguration" factoryName="Clojure Script">
      <module name="thermodynmetal" />
      <setting name="path" value="" />
      <setting name="namespace" value="" />
      <setting name="useLein" value="false" />
      <setting name="profiles" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="1e16ebec-3d43-461b-82ea-c86814688abb" name="Default Changelist" comment="" />
      <created>1547450483549</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1547450483549</updated>
    </task>
    <task id="LOCAL-00001" summary="grain boundary segregation enthalpy could be calculated now&#10;rewrite with clojure&#10;first release">
      <created>1547637841718</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1547637841718</updated>
    </task>
    <task id="LOCAL-00002" summary="grain boundary segregation enthalpy could be listed in a table">
      <created>1547715214833</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1547715214833</updated>
    </task>
    <task id="LOCAL-00003" summary="relationship between the grain boundary energy and the grain size added">
      <created>1550227577049</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1550227577049</updated>
    </task>
    <task id="LOCAL-00004" summary="version update to 0.1.5">
      <created>1550227844552</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1550227844552</updated>
    </task>
    <option name="localTasksCounter" value="5" />
    <servers />
  </component>
  <component name="TodoView" selected-index="3">
    <todo-panel id="selected-file">
      <is-autoscroll-to-source value="true" />
    </todo-panel>
    <todo-panel id="all">
      <are-packages-shown value="true" />
      <is-autoscroll-to-source value="true" />
    </todo-panel>
  </component>
  <component name="ToolWindowManager">
    <frame x="305" y="268" width="926" height="770" extended-state="0" />
    <layout>
      <window_info content_ui="combo" id="Project" order="0" sideWeight="0.4992" weight="0.2990762" />
      <window_info id="Structure" order="1" sideWeight="0.5008" side_tool="true" weight="0.24942264" />
      <window_info id="Designer" order="2" />
      <window_info id="UI Designer" order="3" />
      <window_info id="Favorites" order="4" sideWeight="0.5008" side_tool="true" weight="0.24942264" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Run" order="2" sideWeight="0.46073902" weight="0.32861635" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" sideWeight="0.49769053" weight="0.32861635" />
      <window_info anchor="bottom" id="Version Control" order="7" sideWeight="0.49422634" weight="0.32861635" />
      <window_info anchor="bottom" id="Terminal" order="8" sideWeight="0.4965358" weight="0.32861635" />
      <window_info anchor="bottom" id="Event Log" order="9" sideWeight="0.50461894" side_tool="true" weight="0.32861635" />
      <window_info anchor="bottom" id="Messages" order="10" sideWeight="0.4965358" weight="0.32861635" />
      <window_info anchor="bottom" id="REPL" order="11" sideWeight="0.539261" side_tool="true" weight="0.32861635" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" sideWeight="0.4992" weight="0.24942264" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Palette" order="3" />
      <window_info anchor="right" id="Leiningen" order="4" sideWeight="0.4992" weight="0.3290993" />
      <window_info anchor="right" id="Palette&#9;" order="5" />
      <window_info anchor="right" id="Maven Projects" order="6" sideWeight="0.4992" weight="0.3290993" />
    </layout>
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State>
              <option name="RECENTLY_FILTERED_USER_GROUPS">
                <collection />
              </option>
              <option name="RECENTLY_FILTERED_BRANCH_GROUPS">
                <collection />
              </option>
              <option name="COLUMN_ORDER">
                <list>
                  <option value="0" />
                  <option value="1" />
                  <option value="2" />
                  <option value="3" />
                </list>
              </option>
            </State>
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsContentAnnotationSettings">
    <option name="myLimit" value="2678400000" />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="grain boundary segregation enthalpy could be calculated now&#10;rewrite with clojure&#10;first release" />
    <MESSAGE value="grain boundary segregation enthalpy could be listed in a table" />
    <MESSAGE value="relationship between the grain boundary energy and the grain size added" />
    <MESSAGE value="version update to 0.1.5" />
    <option name="LAST_COMMIT_MESSAGE" value="version update to 0.1.5" />
    <option name="REFORMAT_BEFORE_PROJECT_COMMIT" value="true" />
  </component>
  <component name="antWorkspaceConfiguration">
    <option name="IS_AUTOSCROLL_TO_SOURCE" value="false" />
    <option name="FILTER_TARGETS" value="false" />
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/miedema.clj" />
    <entry file="file://D:/thermodynmetal/project.clj" />
    <entry file="file://$PROJECT_DIR$/../fn-fx/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="400">
          <caret line="31" column="54" selection-start-line="31" selection-start-column="54" selection-end-line="31" selection-end-column="54" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="425">
          <caret line="17" lean-forward="true" selection-start-line="17" selection-end-line="17" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/org/shender/clojure_gnuplot.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="50">
          <caret line="2" column="56" selection-start-line="2" selection-start-column="56" selection-end-line="2" selection-end-column="56" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/thermodynmetal/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="25">
          <caret line="87" column="165" selection-start-line="87" selection-start-column="165" selection-end-line="87" selection-end-column="165" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/thermodynmetal/miedema.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="95">
          <caret line="7" column="28" selection-start-line="7" selection-start-column="28" selection-end-line="7" selection-end-column="28" />
          <folding>
            <element signature="e#409#716#0" />
            <element signature="e#5855#6304#0" />
            <element signature="e#6306#6776#0" />
            <element signature="e#6441#8327#0" />
            <element signature="e#8387#9389#0" />
            <element signature="e#9393#9786#0" />
            <element signature="e#12669#13153#0" />
            <element signature="e#13126#13451#0" />
            <element signature="e#13924#15008#0" />
          </folding>
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>10</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>thermodynmetal</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
                <option value="0.6" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectJDKs.UI">
        <settings>
          <last-edited>10</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Leiningen: clojure-complete:0.2.4</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>